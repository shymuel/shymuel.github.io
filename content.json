{"meta":{"title":"Shymuel's Blog","subtitle":"","description":"Learn and Play","author":"Shymuel","url":"https://shymuel.top","root":"/"},"pages":[{"title":"","date":"2021-08-29T08:30:13.980Z","updated":"2021-06-26T12:07:06.000Z","comments":true,"path":"404.html","permalink":"https://shymuel.top/404.html","excerpt":"","text":""},{"title":"","date":"2021-06-26T12:04:55.000Z","updated":"2021-06-27T03:19:42.000Z","comments":true,"path":"about/index.html","permalink":"https://shymuel.top/about/index.html","excerpt":"","text":"只是一时兴起罢了。 E-mail: shymuel1998@163.com Brief：C++/Java，太弱小了，没有力量。 2021.06.26 如果不提高业务能力的话，就不得不昧着良心去做事情了。所以为了让自己心里好受一些，也要努力学习和进步。"},{"title":"所有分类","date":"2021-06-27T03:16:47.000Z","updated":"2021-06-27T03:18:24.000Z","comments":true,"path":"categories/index.html","permalink":"https://shymuel.top/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-06-27T03:19:59.000Z","updated":"2021-08-17T04:05:46.000Z","comments":true,"path":"friends/index.html","permalink":"https://shymuel.top/friends/index.html","excerpt":"目前只有一个友链的shymuel是屑。","text":"目前只有一个友链的shymuel是屑。 不会有人从这个渠道申请吧？不会吧不会吧？"},{"title":"img","date":"2021-06-26T12:06:11.000Z","updated":"2021-06-26T12:06:12.000Z","comments":true,"path":"img/index.html","permalink":"https://shymuel.top/img/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-08-29T09:19:25.116Z","updated":"2021-08-29T09:19:25.116Z","comments":true,"path":"tags/index.html","permalink":"https://shymuel.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【XAI】Explainable Resources","slug":"【XAI】Explainable AI Resources","date":"2024-01-27T15:06:32.000Z","updated":"2024-01-27T15:10:02.458Z","comments":true,"path":"415146091.html","link":"","permalink":"https://shymuel.top/415146091.html","excerpt":"","text":"本文总结了一系列XAI资源。可解释性技术根据算法用途的不同可分为：（1）输出解释Output Explanation，和（2）DNN原理解释Principle Explanation。根据研究对象的不同，可分为面向CNN和transformer的技术。根据解释方法部署的不同阶段，可分为事前解释方法和事后解释方法。 Key words：XAI，interpretable DNN, CNN, transformer 同年的工作中，会议放在期刊之前，因为期刊审稿周期长，通常提交时间更早。 0 领域大牛 XAI：张拳石，周博磊。 1 Output Explanation 对于输出解释，我们将面向CNN的算法和面向Transformer的算法分开列出，如果面向CNN的算法也能用于Transformer将说明（尽管通常这会在两篇不同的论文中）。 根据解释算法部署阶段的不同分为事前解释方法和事后解释方法。 根据解释的生效范围的不同，可以分为局部解释和全局解释。局部解释生成针对单个输入的解释，全局解释生成针对一组输入的解释，我们将半局部解释的含义包含在全局解释中。 全局解释的形式包括从模型中提取规则以建立可解释模型（如决策树，规则集），或解释神经元/层。 局部解释的形式包括attribution map，给出相似例子等。 1.0 Review Explaining deep neural networks and beyond: A review of methods and applications. Samek W, Montavon G, Lapuschkin S, et al. Proceedings of the IEEE, 2021. CNN，事后解释。 1.1 CNN 1.1.1 Intrinsic Methods 事前可解释方法通常提供全局解释。 1.1.2 Post-hoc Methods Global Interpretability Methods activation maximization： Synthesizing the preferred inputs for neurons in neural networks via deep generator networks. [code] Nguyen A, Dosovitskiy A, Yosinski J, et al. Advances in neural information processing systems, 2016. 用GAN生成AM图片。 Multifaceted feature visualization: Uncovering the different types of features learned by each neuron in deep neural networks. Nguyen A, Yosinski J, Clune J. arXiv preprint arXiv:1602.03616, 2016. 研究多语义神经元，使用多种初始值生成更丰富的样本，没有中稿，没有代码。 Deep inside convolutional networks: Visualising image classification models and saliency maps. [code] Simonyan K, Vedaldi A, Zisserman A. arXiv preprint arXiv:1312.6034, 2013. 系列算法的开山之作，包含了模型最大化和基于梯度的方法。 Local Interpretability Methods attribution： （1）LRP(layer-wise relevance propagation)： On pixel-wise explanations for non-linear classifier decisions by layer-wise relevance propagation. Bach S, Binder A, Montavon G, et al. PloS one, 2015. LRP系列开山之作，用caffe写的，没有代码。 （2）Gradient-based： Axiomatic attribution for deep networks. Sundararajan M, Taly A, Yan Q. International conference on machine learning. PMLR, 2017. 提出积分梯度IG。可以解决LRP和基于梯度的方法对于模型结构的依赖性。代码建议用captum的。 （3）LIME(Local Interpretable Model-Agnostic Explanations)： \"Why should i trust you?\" Explaining the predictions of any classifier. [code] Ribeiro M T, Singh S, Guestrin C. Proceedings of the 22nd ACM SIGKDD international conference on knowledge discovery and data mining. 2016. LIME系列的开山之作。 1.2 Transformer 1.3 Evaluation of XAI methods 2 Principle Explanation 模型原理研究可以全部视为全局解释方法。 2.1 CNN 2.2 Transformer 2.3 Evaluation of XAI methods intrinsic XAI指的是在模型训练结束之前进行一些操作，使得训练出的模型具备更高的可解释性。 1.1 model PIP-Net: Patch-Based Intuitive Prototypes for Interpretable Image Classification. [code] Meike NautaJörg SchlöttererMaurice van KeulenChristin Seifert. 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR) (2023) MonoNet: Enhancing interpretability in neural networks via Monotonic Features. An-Phi NguyenDana Lea MorenoNicolas Le-BelMaría Rodríguez Martínez. Bioinformatics Advances (2023) 1.2 neuron/layer 1.3 input feature 1.4 hidden semanics ProtoSeg: Interpretable Semantic Segmentation with Prototypical Parts. [code](https://github.com/gmum/proto-segmentation) Mikolaj SachaDawid RymarczykLukasz StruskiJacek TaborBartosz Zielinski. 2023 IEEE/CVF Winter Conference on Applications of Computer Vision (WACV) (2023) 3 XAI toolkit Lucid：基于 captum： 4 XAI website","categories":[],"tags":[{"name":"XAI","slug":"XAI","permalink":"https://shymuel.top/tags/XAI/"},{"name":"resources","slug":"resources","permalink":"https://shymuel.top/tags/resources/"}]},{"title":"【竹夭的Pytorch讲义】01","slug":"【竹夭的Pytorch讲义】01","date":"2024-01-19T16:14:47.000Z","updated":"2024-01-19T16:29:11.451Z","comments":true,"path":"3212441176.html","link":"","permalink":"https://shymuel.top/3212441176.html","excerpt":"","text":"0 大纲 安装和设置环境 配置开发环境，如安装适当的Python版本和IDE，安装PyTorch和相关的软件包 初识pytorch 张量和张量操作 张量的概念和基本操作 张量的创建、索引和切片操作 张量的数学运算和广播操作 自动求导和反向传播 自动求导的概念和原理 使用PyTorch进行自动求导和反向传播 优化器和学习率 构建神经网络模型 PyTorch中的神经网络模型的组成和结构 构建自定义的神经网络模型 常见的神经网络层和激活函数 数据加载和预处理 数据集的收集和准备 使用PyTorch的Dataset和DataLoader加载和处理数据 数据增强和预处理操作 训练和评估模型 训练模型的基本流程和步骤 定义损失函数和评估指标 批量训练和迭代优化模型 模型的评估和性能指标的计算 迁移学习和预训练模型 迁移学习的概念和应用 使用预训练模型进行迁移学习的步骤 常见的预训练模型和使用方法 模型部署和推理 将训练好的模型导出和保存 在生产环境中使用模型进行推理和预测 常见的模型部署方法和工具 1 安装和设置环境 1.1 配置开发环境 用anaconda3管理包，用pycharm（学生可以免费用professional版）编写代码。 安装pytorch不需要翻墙，直接用官网的命令即可。 1.2 初识pytorch pytorch官方文档。 1.2.1 两个实用函数 研究Pytorch包之类的新package用到两个函数：dir()，用来打开package，输出分割区；help()，用来输出package或其中一些内容的帮助文档，一般看函数的帮助文档，注意函数后面不需要加括号。 123456789import torchans = torch.cuda.is_available()print(ans)print(dir(torch))help(torch)print(dir(torch.AnyType))help(torch.cuda.is_available) 可以运行上述代码，观察输出。 对pytorch的初步认识： Pytorch实现模型训练：数据+模型+损失函数+优化器=迭代训练。 数据：包括数据读取和数据清洗等。 模型：包括构建模型模块，组织复杂网络，初始化网络参数，定义网络层。 损失函数：包括创建损失函数，设置损失函数超参数，根据不同任务选择合适的损失函数。 优化器：包括根据梯度使用某种优化器更新参数，管理模型参数，管理多个参数组实现不同学习率，调整学习率。 迭代训练：组织上面4个模块进行反复训练。包括观察训练效果，绘制Loss/Accuracy曲线，用TensorBoard进行可视化分析。 2 张量和张量操作 2.1 张量的概念和基本操作 本章代码： https://github.com/zhangxiann/PyTorch_Practice/blob/master/lesson1/tensor_introduce1.py https://github.com/zhangxiann/PyTorch_Practice/blob/master/lesson1/tensor_introduce1.py 标量可以称为0维张量，向量可以称为1维张量，矩阵可以称为2维张量，RGB图像可以表示3维张量。可以把张量看作多维数组。 size和shape的关系 Numpy中，size()和shape()是两个函数，np.size(a)返回a中所有元素的个数，np.shape(a)返回a每维的大小。 Pytorch中，shape是张量的一个属性，比如a.shape。a.size会输出a在内存中的占用情况，a.size(axis)会输出a在axis维度上的大小。 Tensor与Variable 在PyTorch 0.4.0之前，torch.autograd包中存在Variable这种数据类型，主要是用于封装Tensor，进行自动求导。Variable主要包含下面几种属性。 data：被包装的Tensor。 grad：data 的梯度。 grad_fn：创建 Tensor 所使用的 Function，是自动求导的关键，根据所记录的函数才能计算出导数。 requires_grad：指示是否需要梯度，并不是所有的张量都需要计算梯度。 is_leaf：指示是否叶子节点(张量)，叶子节点的概念在计算图中会用到，后面详细介绍。 Variable类的属性 在PyTorch 0.4.0之后，Variable并入了Tensor。在之后版本的Tensor中，除了具有上面Variable的5个属性，还有另外3个属性。 dtype：张量的数据类型，如torch.FloatTensor，torch.cuda.FloatTensor。 shape：张量的形状，如(64, 3, 224, 224)。 device：张量所在设备 (CPU/GPU)，GPU是加速计算的关键。 Tensor类的属性 关于dtype，PyTorch提供了9种数据类型，共分为3大类：float(16-bit, 32-bit, 64-bit)、integer(unsigned-8-bit ,8-bit, 16-bit, 32-bit, 64-bit)、Boolean。模型参数和数据用的最多的类型是float-32-bit。label 常用的类型是integer-64-bit。 常用数据类型及其写法 2.2 张量的创建和索引 2.2.1 张量的创建 直接创建Tensor 1torch.tensor(data, dtype=None, device=None, requires_grad=False, pin_memory=False) data：数据，可以是list，numpy。 dtype：数据类型，默认与data的一致。 device：所在设备，cuda/cpu。 requires_grad：是否需要梯度。 pin_memory：是否存于锁页内存。 从numpy创建Tensor 使用torch.from_numpy(ndarray) 。利用这个方法创建的tensor和原来的ndarray共享内存，当修改其中一个数据，另外一个也会被改动。 根据数值创建Tensor 1torch.zeros(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) 根据size创建全0张量。 size：张量的形状。 out：输出的张量。如果指定了out，那么torch.zeros()返回的张量和 out 指向的是同一个地址。 layout：内存中布局形式，有strided，sparse_coo等。当是稀疏矩阵时，设置为sparse_coo可以减少内存占用。 device：所在设备，cuda/cpu。 requires_grad：是否需要梯度。 1torch.zeros_like(input, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) 根据input的形状创建全0张量。 input：创建与input同形状的全0张量。 dtype：数据类型。 layout：内存中布局形式，有strided，sparse_coo等。当是稀疏矩阵时，设置为sparse_coo可以减少内存占用。 同理还有全1张量的创建方法：torch.ones()，torch.ones_like()。 1torch.full(size, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) torch.full()，torch.full_like()可以创建自定义数值的张量。 size：张量的形状，如(3,3)。 fill_value：张量中每一个元素的值。 根据数学公式创建Tensor 1torch.arange(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) 创建等差的1维张量。注意区间为[start, end)。 start：数列起始值。 end：数列结束值，开区间，取不到结束值。 step：数列公差，默认为1。 1torch.linspace(start, end, steps=100, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) 创建均分的1维张量。数值区间为[start, end]。\\(a_i=a_0+\\frac{end-start}{step-1}*i\\) start：数列起始值。 end：数列结束值。 steps：数列长度，即元素个数。 1torch.logspace(start, end, steps=100, base=10.0, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) 创建对数均分的1维张量。数值区间为[start, end]，底为base。 start：数列起始值。 end：数列结束值。 steps：数列长度（元素个数）。 base：对数函数的底，默认为10。 1torch.eye(n, m=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) 创建单位对角矩阵（2维张量），默认为方阵。 n：矩阵行数。通常只设置n，为方阵。 m：矩阵列数。 根据概率创建Tensor 1torch.normal(mean, std, *, generator=None, out=None) 生成正态分布（高斯分布）。 mean：均值。 std：标准差。 该函数有4种模式： mean为标量，std为标量。这时需要设置size。 mean为标量，std为张量。 mean为张量，std为标量。 mean为张量，std为张量。 1torch.randn(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) torch.randn()和torch.randn_like() ，用来生成标准正态分布。 size：张量的形状。 1torch.rand(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) torch.rand()和torch.rand_like()在区间[0, 1)上生成均匀分布。 12randint(low=0, high, size, *, generator=None, out=None,dtype=None, layout=torch.strided, device=None, requires_grad=False) torch.randint()和torch.randint_like() ，在区间[low, high)上生成整数均匀分布并采样。 size：张量的形状。 1torch.randperm(n, out=None, dtype=torch.int64, layout=torch.strided, device=None, requires_grad=False) 生成从0到n-1的随机排列，常用于生成索引。 n：张量的长度。 1torch.bernoulli(input, *, generator=None, out=None) 以input为概率，生成伯努利分布（即0-1 分布，两点分布）。 input：概率值。 2.2.2 张量的索引 1torch.max(input, dim, keepdim=False, out=None) -&gt; (Tensor, LongTensor) 按维度dim返回最大值以及最大值的索引。dim = 0表示按列求最大值，dim = 1表示按行求最大值。 1torch.nonzero(input) 返回一个包含输入input中非零元素索引的张量，输出张量中的每行包含input中非零元素的索引。如果输入input有n维，则输出的索引张量out的size为z×n , 这里z是输入张量input中所有非零元素的个数。 1torch.where(condition，a，b) 按照一定的规则合并两个tensor类型。 condition：条件限制，如果满足条件，则选择a，否则选择b作为输出。注意a和b是tensor。 numpy中也有where()，其输入非tensor。 1torch.index_select(input, dim, index, out=None) 在维度dim上，按照index索引取出数据拼接为张量返回。 input：要索引的张量。 dim：要索引的维度。 index：要索引数据的序号。 1torch.masked_select(input, mask, out=None) 按照mask中的True进行索引拼接得到一维张量返回。 input：要索引的张量。 mask：与input同形状的布尔类型张量。 2.3 张量的维度操作和数学运算 2.3.1 张量的维度操作 1torch.cat(tensors, dim=0, out=None) 将张量按照dim维度进行拼接。 tensors：张量序列。 dim：要拼接的维度。dim=0是行数，1是列数。 1torch.stack(tensors, dim=0, out=None) 将张量在新创建的dim维度上进行拼接。 tensors：张量序列。 dim：要拼接的维度。 1torch.chunk(input, chunks, dim=0) 将张量按照维度dim进行平均切分。若不能整除，则最后一份张量小于其他张量。 input：要切分的张量。 chunks：要切分的份数。 dim：要切分的维度。 1torch.split(tensor, split_size_or_sections, dim=0) 将张量按照维度dim进行平均切分。可以指定每一个分量的切分长度。 tensor：要切分的张量 split_size_or_sections：为int时表示每一份的长度，如果不能被整除，则最后一份张量小于其他张量；为list时按照list元素作为每一个分量的长度切分。如果list元素之和不等于切分维度dim的值则报错。 dim：要切分的维度。 1torch.reshape(input, shape) 变换张量的形状（维度）。当张量在内存中是连续时，返回的张量和原来的张量共享数据内存，改变一个变量时，另一个变量也会被改变。 input：要变换的张量。 shape：新张量的形状。 1torch.transpose(input, dim0, dim1) 交换张量的两个维度。常用于图像的变换，比如把c*h*w变换为c*w*h。 input：要交换维度的张量。 dim0：要交换的第一个维度。 dim1：要交换的第二个维度。 1torch.t(input) 2维张量转置。 1torch.squeeze(input, dim=None, out=None) 压缩长度为1的维度。 dim：若为None，则移除所有长度为1的维度；若指定维度，则当且仅当该维度长度为1时可以移除。 1torch.unsqueeze(input, dim) 根据dim扩展维度，长度为1。 2.3.2 张量的数学运算 主要分为3类：加减乘除，对数指数，幂函数和三角函数。这里介绍一下常用的几种方法。 12torch.add(input, other, out=None)torch.add(input, other, *, alpha=1, out=None) 逐元素计算input+alpha*other。因为在深度学习中经常用到先乘后加的操作。 input：第一个张量。 alpha：乘项因子。 other：第二个张量。 1torch.addcdiv(input, tensor1, tensor2, *, value=1, out=None) \\(\\text{out}_{i}=\\text{input}_{i}+\\text{value}\\times \\frac{\\text{tensor1}_{i}}{\\text{tensor2}_{i}}\\) 1torch.addcmul(input, tensor1, tensor2, *, value=1, out=None) \\(\\text{out}_{i}=\\text{input}_{i}+\\text{value}\\times \\text{tensor1}_{i} \\times \\text{tensor 2}_{i}\\) 3 自动求导和反向传播 3.1 计算图与自动求导 计算图 计算图是用来描述运算的有向无环图，主要包括节点（Node）和边（Edge）。节点表示数据，如向量、矩阵、张量。边表示运算，如加减乘除卷积等。 有公式\\(y=(x+w)*(w+1)\\)，\\(x=2, \\ w=1\\)，对\\(w\\)求导，根据复合函数的求导法则可以得到如下过程： \\(\\begin{aligned} \\frac{\\partial y}{\\partial w} &amp;=\\frac{\\partial y}{\\partial a} \\frac{\\partial a}{\\partial w}+\\frac{\\partial y}{\\partial b} \\frac{\\partial b}{\\partial w} \\\\ &amp;=b\\times1+a\\times1 \\\\ &amp;=b+a \\\\ &amp;=(w+1)+(x+w) \\\\ &amp;=2 w+x+1 \\\\ &amp;=2\\times1+2+1=5\\end{aligned}\\) 前面说过Tensor中有一个属性is_leaf标记是否为叶子节点，这个概念主要是为了节省内存，在计算图中的一轮反向传播结束之后，非叶子节点的梯度是会被释放的。如果在反向传播结束之后仍然需要保留非叶子节点的梯度，可以使用张量的retain_grad()方法：a.retain_grad()。 Tensor中的grad_fn属性记录的是创建该张量时所用的方法（函数），反向传播求导梯度时需要用到该属性。 PyTorch的动态图机制 PyTorch采用的是动态图机制（Dynamic Computational Graph），而Tensorflow采用的是静态图机制（Static Computational Graph）。动态图是运算和搭建同时进行，也就是可以先计算前面的节点的值再根据这些值搭建后面的计算图。优点是灵活，易调节易调试。PyTorch的写法跟其他Python库是完全一致的，没有额外的学习成本。 静态图是先搭建图，然后再输入数据进行运算。优点是高效，因为静态计算是通过先定义后运行的方式，之后再次运行的时候就不再需要重新构建计算图，所以速度会比动态图更快。但是不灵活。TensorFlow每次运行的时候图都是一样的，是不能够改变的，所以不能直接使用Python的while循环语句，需要使用辅助函数tf.while_loop写成TensorFlow内部的形式。 自动求导（autograd） 深度学习中，权值的更新依赖于梯度的计算，因此梯度的计算是至关重要的。PyTorch 中只需要搭建好前向计算图，就可以利用torch.autograd自动求导得到所有张量的梯度。 1torch.autograd.backward(tensors, grad_tensors=None, retain_graph=None, create_graph=False, grad_variables=None) 自动求取梯度。 tensors：用于求导的张量，如loss。 retain_graph：保存计算图。PyTorch采用动态图机制，默认每次反向传播之后都会释放计算图。该参数设置为True可以不释放计算图，这样就可以多次计算导数。 create_graph：创建导数计算图，用于高阶求导。 grad_tensors：多梯度权重。当有多个loss混合计算梯度时，设置每个loss的权重。 1torch.autograd.grad(outputs, inputs, grad_outputs=None, retain_graph=None, create_graph=False, only_inputs=True, allow_unused=False) 求取梯度。 outputs：用于求导的张量，如loss。 inputs：需要梯度的张量。 create_graph：创建导数计算图，用于高阶求导。 retain_graph：保存计算图。 grad_outputs：多梯度权重计算。 torch.autograd.grad()的返回结果是一个 tunple，需要取出第0个元素才是真正的梯度。 求一阶导时需要设置create_graph=True，让一阶导数grad_1也拥有计算图，然后再使用一阶导求取二阶导。 需要注意的3个点： 在每次反向传播求导时，计算的梯度不会自动清零。如果进行多次迭代计算梯度而没有清零，那么梯度会在前一次的基础上叠加。使用w.grad.zero_()可将梯度清零。 依赖于叶子节点的节点，requires_grad属性默认为True。 叶子节点不可执行inplace操作。以加法来说，inplace操作有a += x，a.add_(x)，改变后的值和原来的值内存地址是同一个。非inplace操作有a = a + x，a.add(x)，改变后的值和原来的值内存地址不是同一个。 如果在反向传播之前用inplace方法改变了叶子节点的值，再执行backward()会报错。这是因为在进行前向传播时，计算图中依赖于叶子节点的那些节点会记录叶子节点的地址，在反向传播时就会利用叶子节点的地址所记录的值来计算梯度。比如在\\(y=a \\times b\\)，其中\\(a=x+w\\)，\\(b=w+1\\)，\\(x\\)和\\(w\\)是叶子节点。当求导\\(\\frac{\\partial y}{\\partial a} = b = w+1\\)，需要用到叶子节点\\(w\\)。 3.2 使用PyTorch进行自动求导和反向传播 以逻辑回归（Logistic Regression）为例，基于PyTorch实现自动求导和反向传播。 逻辑回归是线性的二分类模型。模型表达式\\(y=f(z)=\\frac{1}{1+e^{-z}}\\)，其中\\(z=WX+b\\)。\\(f(z)\\)称为sigmoid函数，也被称为Logistic函数。 \\(y&lt;0.5\\)时类别为0；\\(0.5 \\leq y\\)时类别为1。 其中\\(z=WX+b\\)也是线性回归的模型。从横坐标来看，当\\(z&lt;0\\)时，类别为0；当\\(0 \\leq z\\) 时，类别为1，直接使用线性回归也可以进行分类。逻辑回归是在线性回归的基础上加入了一个sigmoid 函数，这是为了更好地描述置信度，把输入映射到(0,1)区间中，符合概率取值。 逻辑回归也被称为对数几率回归：\\(\\ln \\frac{y}{1-y}=W X+b\\)。几率的表达式为：\\(\\frac{y}{1-y}\\)，\\(y\\)表示正类别的概率，\\(1-y\\)表示另一个类别的概率。根据对数几率回归可以推导出逻辑回归表达式： \\(\\begin{aligned}&amp;\\ln \\frac{y}{1-y}=W X+b \\\\&amp;\\frac{y}{1-y}=e^{W X+b} \\\\&amp;y=e^{W X+b}-y * e^{W X+b} \\\\&amp;y\\left(1+e^{W X+b}\\right)=e^{W X+b} \\\\&amp;y=\\frac{e^{W X+b}}{1+e^{W X+b}}=\\frac{1}{1+e^{-(W X+b)}}\\end{aligned}\\) Pytorch实现逻辑回归 PyTorch 构建模型需要5大步骤： 数据：进行数据预处理。 模型：包括构建模型模块，组织复杂网络，初始化网络参数，定义网络层。 损失函数：包括创建损失函数，设置损失函数超参数，根据不同任务选择合适的损失函数。 优化器：包括根据梯度使用某种优化器更新参数，管理模型参数，管理多个参数组实现不同学习率，调整学习率。 迭代训练：组织上面4个模块进行反复训练。包括观察训练效果，绘制Loss/Accuracy曲线，用TensorBoard进行可视化分析。 123456789101112131415161718192021222324252627282930313233class Linear(Module): r&quot;&quot;&quot;Applies a linear transformation to the incoming data: :math:`y = xA^T + b` Args: in_features: size of each input sample out_features: size of each output sample bias: If set to ``False``, the layer will not learn an additive bias. Default: ``True`` Shape: - Input: :math:`(*, H_&#123;in&#125;)` where :math:`*` means any number of dimensions including none and :math:`H_&#123;in&#125; = \\text&#123;in\\_features&#125;`. - Output: :math:`(*, H_&#123;out&#125;)` where all but the last dimension are the same shape as the input and :math:`H_&#123;out&#125; = \\text&#123;out\\_features&#125;`. Attributes: weight: the learnable weights of the module of shape :math:`(\\text&#123;out\\_features&#125;, \\text&#123;in\\_features&#125;)`. The values are initialized from :math:`\\mathcal&#123;U&#125;(-\\sqrt&#123;k&#125;, \\sqrt&#123;k&#125;)`, where :math:`k = \\frac&#123;1&#125;&#123;\\text&#123;in\\_features&#125;&#125;` bias: the learnable bias of the module of shape :math:`(\\text&#123;out\\_features&#125;)`. If :attr:`bias` is ``True``, the values are initialized from :math:`\\mathcal&#123;U&#125;(-\\sqrt&#123;k&#125;, \\sqrt&#123;k&#125;)` where :math:`k = \\frac&#123;1&#125;&#123;\\text&#123;in\\_features&#125;&#125;` Examples:: &gt;&gt;&gt; m = nn.Linear(20, 30) &gt;&gt;&gt; input = torch.randn(128, 20) &gt;&gt;&gt; output = m(input) &gt;&gt;&gt; print(output.size()) torch.Size([128, 30]) &quot;&quot;&quot; 1nn.BCEloss() # 计算二分类问题的交叉熵 交叉熵介绍博客。 1torch.optim.SGD(params, lr, momentum, dampening, weight_decay, nesterov) params：待优化参数的iterable，或者是定义了参数组的dict。这个参数代表权重\\(w\\)和偏置\\(b\\)等神经网络中的参数。 lr：学习率。 momentum：动量因子。每次\\(x\\)的更新量\\(v=-dx*lr\\)，考虑动量之后公式变为\\(v&#39;=-dx*lr+v*momenmtum\\)。 weight_decay：权重惩罚。 dampening：动量的抑制因子。 nesterov：使用nesterov动量。 用.item()取出张量中的元素而不是用下标，主要是精度有区别。 Pytorch各层输出。 1matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs) 用于生成一个scatter散点图。 x, y：表示的是shape大小为(n,)的数组，也就是我们即将绘制散点图的数据点，输入数据。 s：表示的是散点图上一个点的大小，是一个标量或者是一个shape大小为(n,)的数组，可选，默认20。 c：表示的是色彩或颜色序列，可选，默认蓝色'b'。但是c不应该是一个单一的RGB数字，也不应该是一个RGBA的序列，因为不便区分。c可以是一个RGB或RGBA二维行数组。 marker：MarkerStyle，表示的是标记的样式，可选，默认'o'。 cmap：Colormap，标量或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmap，可选，默认None。 norm：Normalize，数据亮度在0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认None。 vmin，vmax：标量，当norm存在的时候忽略。用来进行亮度数据的归一化，可选，默认None。 alpha：散点的透明度。标量，0-1之间，可选，默认None。 linewidths：标记取不同样式的时候，其中也许会有可以设置宽度的线，这时候这个参数是有效的。 3.3 优化器和学习率 3.3.1 优化器 梯度下降 (Gradient Descent) 批量梯度下降 (Batch Gradient Descent): 使用整个训练数据集来计算梯度。 随机梯度下降 (Stochastic Gradient Descent, SGD): 在每次迭代中使用一个训练样本来计算梯度。 小批量梯度下降 (Mini-Batch Gradient Descent): 使用一个小的数据子集（小批量）来计算梯度。2. Momentum 为了加速SGD，Momentum考虑了过去的梯度来平滑更新。3. Adagrad (Adaptive Gradient Algorithm) 为每个参数调整学习率，使频繁出现的参数有较小的学习率，而较少出现的参数有较大的学习率。4. RMSprop (Root Mean Square Propagation) 与Adagrad类似，但是使用移动平均的平方梯度来调整学习率。5. Adam (Adaptive Moment Estimation) 结合了Momentum和RMSprop的想法。它计算梯度的指数移动平均值和平方梯度的指数移动平均值来调整每个参数的学习率。6. Adadelta 是Adagrad的一个扩展，旨在减少其学习率的急剧下降。7. Nadam 结合了Adam和Nesterov的动量。8. FTRL (Follow The Regularized Leader) 主要用于大规模线性模型，如LR和FM。9. L-BFGS (Limited-memory Broyden–Fletcher–Goldfarb–Shanno) 一种准牛顿方法，通常用于全批量优化。 每种优化器都有其特定的应用场景和优势。在深度学习中，Adam、RMSprop和SGD with Momentum是最常用的优化器。选择哪种优化器取决于具体的问题和数据。实际上，为了找到最佳的优化器和超参数设置，通常需要进行多次实验。 https://blog.csdn.net/KGzhang/article/details/77479737 https://blog.csdn.net/Decennie/article/details/119222319 https://zhuanlan.zhihu.com/p/38945390 AdamW是一种深度学习模型的优化器，它基于Adam优化器（自适应矩估计）进行修改，更准确地实现了权重衰减。AdamW在一些情况下被观察到比原始的Adam优化器有更好的性能。 在深度学习中，我们通常通过随机梯度下降（SGD）或其变种来优化模型的参数，以最小化损失函数。这种优化过程可能会导致模型的参数值过大，从而导致过拟合。为了避免过拟合，我们可以对模型的参数进行权重衰减，即在优化过程中对模型参数应用一种惩罚。 原始的Adam优化器在其参数更新公式中包含一个衰减项，但这种方式实际上并不能有效地实现权重衰减。相反，它更类似于L2正则化，这与权重衰减的概念是有区别的。 在这里，AdamW优化器的提出就是为了解决这个问题。它将权重衰减与优化步骤分开，确保权重衰减只应用于模型的参数，而不是应用于梯度或者其它中间步骤。这样可以更精确地实现权重衰减，帮助模型在训练过程中保持更好的泛化能力。 总的来说，AdamW优化器在实践中通常可以带来更好的性能，尤其是对于大型的预训练模型，如BERT、GPT等。 3.3.2 学习率 待预热的学习率。 get_cosine_schedule_with_warmup：创建一个余弦退火学习率调度器，并包含了一个预热阶段。在预热阶段，学习率从 0 线性增加到初始学习率。预热步数由 config.lr_warmup_steps 指定。预热阶段过后，学习率开始按照余弦退火的方式下降。num_training_steps表示总的训练步数，计算方式是训练数据的批次数乘以训练的总周期数。num_training_steps=(len(train_dataloader) * config.num_epochs) 中，计算方式是训练数据的批次数乘以训练的总周期数。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"https://shymuel.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"AI框架","slug":"AI框架","permalink":"https://shymuel.top/tags/AI%E6%A1%86%E6%9E%B6/"},{"name":"机器学习","slug":"机器学习","permalink":"https://shymuel.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://shymuel.top/tags/Pytorch/"}]},{"title":"【Haskell教程】01","slug":"【Haskell教程】01","date":"2023-06-10T15:46:49.147Z","updated":"2023-06-10T15:53:31.664Z","comments":true,"path":"4240470103.html","link":"","permalink":"https://shymuel.top/4240470103.html","excerpt":"","text":"该系列博客是我结合多个来源的Haskell教程和自己对Haskell的理解写的。主体内容来源于w3cschool的Haskell教程，不过这个教程也是根据外国的一本教材翻译来的，我把一些语法错误、我认为没必要的修辞等内容去掉，并对我觉得不清楚的内容进行了进一步的解释。该系列的章节设置就是按照w3cshool中的章节名来的，但是每篇博客会控制在1w个字符左右（我能够耐心读完的长度）。对于后续一些困难的、具体的知识点（如Monad），知乎上大佬的回答非常有用，在此表达由衷的感谢。 w3cschool Haskell教程，WIKI教程 Haskell教程，Haskell网站编译器。 我是在windows系统上安装Haskell编译环境的。官网地址上提供的一条指令安装的方法由于网络问题完全不行。我使用另一个网站提供的链接成功安装。使用其中的命令时也会因为网络问题中断安装，这种时候不要慌，看清楚报错中说的要从哪个链接下载文件安装到什么文件夹，手动创建该文件夹，自己下载文件并放置到该文件中，然后再次运行命令，命令就会认为已经成功安装该文件，进行接下来的步骤了。 1 Haskell简介 Haskell 是惰性的。也就是说若非特殊指明，函数在真正需要结果以前不会被求值。 Haskell 是静态类型的。当你编译程序时，编译器需要明确哪个是数字，哪个是字符串。这就意味着很大一部分错误都可以在编译时被发现，若试图将一个数字和字符串相加，编译器就会报错。Haskell 拥有一套强大的类型系统，支持自动类型推导。 2 Haskell入门 2.1 运算符和函数 1234567849 * 100(50 * 100) - 49995 / 2True &amp;&amp; False False || True not False 5 == 55 /= 4 # 不等于的意思 +运算符要求两端都是数值，而==运算符仅对两个可比较的值可用。这就要求他们的类型都必须一致。5+4.0是可以执行的，5既可以做被看做整数也可以被看做浮点数，但4.0则不能被看做整数。*是一个将两个数相乘的函数，就像三明治一样，用两个参数将它夹在中央，这被称作中缀函数。而其他大多数不能与数夹在一起的函数则被称作前缀函数。绝大部分函数都是前缀函数，在接下来我们就不多做甄别。大多数命令式编程语言中的函数调用形式通常就是函数名，括号，由逗号分隔的参数表。而在haskell中，函数调用的形式是函数名，空格，空格分隔的参数表。 123succ 8 # 返回一个数的后继min 9 10max 100 101 函数调用拥有最高的优先级，如下两句是等效的： 12succ 9 + max 5 4 + 1(succ 9) + (max 5 4) + 1 如果某函数有两个参数，可以用 ` 符号将它括起，以中缀函数的形式调用它。例如取两个整数相除所得商的div函数，div 92 10可得9，但这种形式不容易理解：究竟是哪个数是除数，哪个数被除？使用中缀函数的形式92 `div` 10就更清晰了。从命令式编程走过来的人们往往会觉得函数调用与括号密不可分，在C中，调用函数必加括号，就像foo()，bar(1)，或者baz(3,\"haha\")。而在Haskell中，函数的调用必使用空格，例如bar (bar 3)，它并不表示以bar和3两个参数去调用bar，而是以bar 3所得的结果作为参数去调用bar。在C中，就相当于bar(bar(3))。 自定义函数： 1doubleMe x = x + x 函数的声明与它的调用形式大体相同，都是先函数名，后跟由空格分隔的参数表。但在声明中一定要在=后面定义函数的行为。 +运算符对整数和浮点都可用（实际上所有有数字特征的值都可以），所以我们的函数可以处理一切数值。声明一个包含两个参数的函数如下： 123456doubleUs x y = x*2 + y*2 doubleUs x y = x + x + y + y # 二者同级doubleMe x = x + xdoubleUs x y = doubleMe x + doubleMe y main = print(doubleUs 5 4) Haskell中的函数没有顺序，所以先声明doubleUs还是先声明doubleMe都是同样的。如下，我们编写一个函数，它将小于100的数都乘以2，因为大于100的数都已经足够大了！（实验之后发现不需要缩进） 1234doubleSmallNumber x = if x &gt; 100 then x else x*2main = print(doubleSmallNumber 50) 1doubleSmallNumber&#x27; x = (if x &gt; 100 then x else x*2) + 1 若是去掉括号，那就会只在小于100的时候加1。注意函数名最后的那个单引号，它没有任何特殊含义，只是一个函数名的合法字符罢了。通常，我们使用单引号来区分一个稍经修改但差别不大的函数。定义这样的函数也是可以的： 1conanO&#x27;Brien = &quot;It&#x27;s a-me, Conan O&#x27;Brien!&quot; 在这里有两点需要注意。首先就是我们没有大写conan的首字母，因为首字母大写的函数是不允许的，稍后我们将讨论其原因；另外就是这个函数并没有任何参数。没有参数的函数通常被称作“定义”（或者“名字”），一旦定义，conanO'Brien就与字符串\"It's a-me, Conan O'Brien!\"完全等价，且它的值不可以修改。 2.2 List入门 在Haskell中，List是最常用的数据结构，并且十分强大，灵活地使用它可以解决很多问题。本节我们将对List，字符串和list comprehension有个初步了解。 在Haskell中，List是一种单类型的数据结构，可以用来存储多个类型相同的元素。我们可以在里面装一组数字或者一组字符，但不能把字符和数字装在一起。 Note：在ghci下，我们可以使用let关键字来定义一个常量。在ghci下执行let a = 1与在脚本中编写a=1是等价的 123lostNumbers = [4,8,15,16,23,48]main = print(lostNumbers) 一个List由方括号括起，其中的元素用逗号分隔开来。若试图写[1,2,'a',3,'b','c',4]这样的List，Haskell就会报出这几个字符不是数字的错误。字符串实际上就是一组字符的List，\"Hello\"只是['h','e','l','l','o']的语法糖而已。所以我们可以使用处理List的函数来对字符串进行操作。 将两个List合并是很常见的操作，这可以通过++运算符实现。 1&quot;hello&quot; ++ &quot; &quot; ++ &quot;world&quot; 在使用++运算符处理长字符串时要格外小心(对长List也是同样)，Haskell会遍历整个的List（++符号左边的那个）。在处理较短的字符串时问题还不大，但要是在一个5000万长度的List上追加元素，那可得执行好一会儿了。所以说，用:运算符往一个List前端插入元素会是更好的选择。 1234ghci&gt; &#x27;A&#x27;:&quot; SMALL CAT&quot; &quot;A SMALL CAT&quot; ghci&gt; 5:[1,2,3,4,5] [5,1,2,3,4,5] :运算符可以连接一个元素到一个List或者字符串之中，而++运算符则是连接两个List。若要使用++运算符连接单个元素到一个List之中，就用方括号把它括起使之成为单个元素的List。[1,2,3]实际上是1:2:3:[]的语法糖。[]表示一个空List，若要从前端插入3，它就成了[3]，再插入2，它就成了[2,3]，以此类推。 Note:[],[[]],[[],[],[]]是不同的。第一个是一个空的List，第二个是含有一个空List的List，第三个是含有三个空List的List。 若是要按照索引取得List中的元素，可以使用!!运算符，索引的下标为0。 1234ghci&gt; &quot;Steve Buscemi&quot; !! 6 &#x27;B&#x27; ghci&gt; [9.4,33.2,96.2,11.2,23.25] !! 1 33.2 若是试图在一个只含有4个元素的List中取它的第6个元素，就会报错。 List同样也可以用来装List，甚至是List的List的List： 123456789ghci&gt; let b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]] ghci&gt; b [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]] ghci&gt; b ++ [[1,1,1,1]] [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]] ghci&gt; [6,6,6]:b [[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]] ghci&gt; b !! 2 [1,2,2,3,4] List中的List可以是不同长度，但必须得是相同的类型。不可以在List中混合放置字符和数组，也不可以混合放置数值和字符。 当List内装有可比较的元素时，使用&gt;和&gt;=可以比较List的大小。它会先比较第一个元素，若它们的值相等，则比较下一个，以此类推。 12345678910ghci&gt; [3,2,1] &gt; [2,1,0] True ghci&gt; [3,2,1] &gt; [2,10,100] True ghci&gt; [3,4,2] &gt; [3,4] True ghci&gt; [3,4,2] &gt; [2,4] True ghci&gt; [3,4,2] == [3,4,2] True 如下是几个常用的函数: head返回一个List的头部，也就是List的首个元素。 12ghci&gt; head [5,4,3,2,1] 5 tail返回一个List的尾部，也就是List除去头部之后的部分。 12ghci&gt; tail [5,4,3,2,1] [4,3,2,1] last返回一个List的最后一个元素。 12ghci&gt; last [5,4,3,2,1] 1 init返回一个List出去最后一个元素的部分。 12ghci&gt; init [5,4,3,2,1] [5,4,3,2] null检查一个List是否为空。如果是，则返回True，否则返回False。应当避免使用xs==\\[\\]之类的语句来判断List是否为空，使用null会更好。 1234ghci&gt; null [1,2,3] False ghci&gt; null [] True reverse将一个List反转。 12ghci&gt; reverse [5,4,3,2,1] [1,2,3,4,5] take返回一个List的前几个元素，看： 12345678ghci&gt; take 3 [5,4,3,2,1] [5,4,3] ghci&gt; take 1 [3,9,3] [3] ghci&gt; take 5 [1,2] [1,2] ghci&gt; take 0 [6,6,6] [] 如上，若是取超过List长度的元素个数，只能得到原List；若take 0个元素，则会得到一个空List！drop与take的用法大体相同，它会删除一个List中的前几个元素。 123456ghci&gt; drop 3 [8,4,2,1,5,6] [1,5,6] ghci&gt; drop 0 [1,2,3,4] [1,2,3,4] ghci&gt; drop 100 [1,2,3,4] [] maximum返回一个List中最大的那个元素。minimun返回最小的。 1234ghci&gt; minimum [8,4,2,1,5,6] 1 ghci&gt; maximum [1,9,2,3,4] 9 sum返回一个List中所有元素的和。product返回一个List中所有元素的积。 123456ghci&gt; sum [5,2,1,6,3,2,5,7] 31 ghci&gt; product [6,2,1,2] 24 ghci&gt; product [1,2,5,6,7,9,2,0] 0 elem判断一个元素是否在包含于一个List，通常以中缀函数的形式调用它。 1234ghci&gt; 4 `elem` [3,4,5,6] True ghci&gt; 10 `elem` [3,4,5,6] False 2.3 更多list函数 怎样得到一个包含1到20之间所有数的List？可以用区间（Range）。Range是构造List方法之一，而其中的值必须是可枚举的，像1、2、3、4...。字符同样也可以枚举，字母表就是A . . Z所有字符的枚举。而名字就不可以枚举了。 要得到包含1到20中所有自然数的List，只要[1 . . 20]即可。 123456ghci&gt; [1..20] [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ghci&gt; [&#x27;a&#x27;..&#x27;z&#x27;] &quot;abcdefghijklmnopqrstuvwxyz&quot; ghci&gt; [&#x27;K&#x27;..&#x27;Z&#x27;] &quot;KLMNOPQRSTUVWXYZ&quot; Range允许你申明一个步长。要得到1到20间所有的偶数或者3的倍数该怎样？ 1234ghci&gt; [2, 4..20] [2,4,6,8,10,12,14,16,18,20] ghci&gt; [3, 6..20] [3,6,9,12,15,18] 仅需用逗号将前两个元素隔开，再标上上限即可。可惜的是不能通过[ 1 , 2 , 4 . . 100 ]这样的语句来获得所有2的幂。一方面是因为步长只能标明一次，另一方面就是仅凭前几项，数组的后项是不能确定的。要得到20到1的List，[20..1]是不可以的。必须得[20,19. .1]。在Range中使用浮点数要格外小心！出于定义的原因，浮点数并不精确。若是使用浮点数的话就会得到如下的糟糕结果 12ghci&gt; [0.1, 0.3..1] [0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999] 建议避免在Range中使用浮点数。 也可以不标明Range的上限，从而得到一个无限长度的List。后面会讲解关于无限List的更多细节。取前24个13的倍数该怎样？完全可以[13 , 26 . . 24 * 13]，但有更好的方法：take 24 [13 , 26 .. ]。 由于Haskell是惰性的，它不会对无限长度的List求值，而是等着看会取多少。如下是几个生成无限List的函数。cycle接受一个List做参数并返回一个无限List。如果你只是想看一下它的运算结果而已，它会运行个没完的。所以应该在某处划好范围。 1234ghci&gt; take 10 (cycle [1,2,3]) [1,2,3,1,2,3,1,2,3,1] ghci&gt; take 12 (cycle &quot;LOL &quot;) &quot;LOL LOL LOL &quot; repeat接受一个值作参数，并返回一个仅包含该值的无限List。这与用cycle处理单元素List差不多。 12ghci&gt; take 10 (repeat 5) [5,5,5,5,5,5,5,5,5,5] 若只是想得到包含相同元素的List，使用replicate会更简单，如replicate 3 10，得[10, 10, 10]。 2.4 List Comprehension 学过数学的你对集合的comprehension（Set Comprehension）概念一定不会陌生。通过它，可以从既有的集合中按照规则产生一个新集合。前十个偶数的set comprehension可以表示为\\(S=\\{2 \\cdot x \\mid x \\in \\mathbb{N}, x \\leq 10\\}\\)。 在Haskell下可以通过类似take 10 [2, 4 ..]的代码来实现。但若是把简单的乘2改成更复杂的函数操作该怎么办呢？用list comprehension，它与set comprehension 十分的相似，用它取前十个偶数轻而易举。这个list comprehension可以表示为： 12ghci&gt; [ x*2 | x &lt;- [1..10]] [2,4,6,8,10,12,14,16,18,20] 可以给这个comprehension再添个限制条件（predicate），它与前面的条件由一个逗号分隔。这里我们要求只取乘以2后大于等于12的元素。 12ghci&gt; [ x*2 | x &lt;- [1..10], x*2 &gt;= 12] [12,14,16,18,20] 取50到100间所有除7的余数为3的元素该怎么办？使用整除： 12ghci&gt; [ x | x &lt;- [50..100], x `mod` 7 == 3] [52,59,66,73,80,87,94] 从一个List中筛选出符合特定限制条件数据的操作也可以称为过滤（flitering）。 假设想要一个comprehension，能够使list中所有大于10的奇数变为“BANG”，小于10的奇数变为“BOOM”，其他则统统扔掉。方便重用起见，我们将这个comprehension置于一个函数之中。 1boomBangs xs = [ if x &lt; 10 then &quot;BOOM!&quot; else &quot;BANG!&quot; | x &lt;- xs, odd x] 这个comprehension的最后部分就是限制条件，使用odd函数判断是否为奇数：返回True，就是奇数，该List中的元素才被包含。 12ghci&gt; boomBangs [7..13] [&quot;BOOM!&quot;,&quot;BOOM!&quot;,&quot;BANG!&quot;,&quot;BANG!&quot;] 也可以加多个限制条件。若要达到 10 到 20 间所有不等于 13，15 或 19 的数，可以这样： 12ghci&gt; [ x | x &lt;- [10..20], x /= 13, x /= 15, x /= 19] [10,11,12,14,16,17,18,20] 除了多个限制条件之外，从多个List中取元素也是可以的。这样的话comprehension会把所有的元素组合交付给我们的输出函数。在不过滤的前提下，取自两个长度为4的集合的comprehension会产生一个长度为 16 的 List。假设有两个List，[ 2 , 5 , 10 ] 和 [ 8 , 10 , 11 ] ， 要取它们所有组合的积，可以这样： 12ghci&gt; [ x*y | x &lt;- [2,5,10], y &lt;- [8,10,11]] [16,20,22,40,50,55,80,100,110] 意料之中，得到的新 List 长度为 9 。若只取乘积大于 50 的结果该如何？ 12ghci&gt; [ x*y | x &lt;- [2,5,10], y &lt;- [8,10,11], x*y &gt; 50] [55,80,100,110] 取个包含一组名词和形容词的List comprehension吧，写诗的话也许用得着。 12345ghci&gt; let nouns = [&quot;hobo&quot;,&quot;frog&quot;,&quot;pope&quot;] ghci&gt; let adjectives = [&quot;lazy&quot;,&quot;grouchy&quot;,&quot;scheming&quot;] ghci&gt; [adjective ++ &quot; &quot; ++ noun | adjective &lt;- adjectives, noun &lt;- nouns] [&quot;lazy hobo&quot;,&quot;lazy frog&quot;,&quot;lazy pope&quot;,&quot;grouchy hobo&quot;,&quot;grouchy frog&quot;, &quot;grouchy pope&quot;,&quot;scheming hobo&quot;, &quot;scheming frog&quot;,&quot;scheming pope&quot;] 编写自己的 length 函数吧！就叫做 length '! 1length&#x27; xs = sum [1 | _ &lt;- xs] _表示我们并不关心从 List 中取什么值。这个函数将一个 List 中所有元素置换为1，并且使其相加求和。得到的结果便是我们的 List 长度。字符串也是List，可以使用 list comprehension 来处理。如下是除去字符串中所有非大写字母的函数： 1removeNonUppercase st = [ c | c &lt;- st, c `elem` [&#x27;A&#x27;..&#x27;Z&#x27;]] 测试一下： 1234ghci&gt; removeNonUppercase &quot;Hahaha! Ahahaha!&quot; &quot;HA&quot; ghci&gt; removeNonUppercase &quot;IdontLIKEFROGS&quot; &quot;ILIKEFROGS&quot; 若操作含有 List 的 List ，使用嵌套的 List comprehension 也是可以的。假设有个包含许多数值的 List 的 List ，在不拆开它的前提下除去其中的所有奇数： 123ghci&gt; let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]] ghci&gt; [ [ x | x &lt;- xs, even x ] | xs &lt;- xxs] [[2,2,4],[2,4,6,8],[2,4,2,6,2,6]] 将 List Comprehension 分成多行也是可以的。若非在 GHCI 之下，还是将 List Comprehension 分成多行好，尤其是需要嵌套的时候。 2.5 Tuple 从某种意义上讲，Tuple（元组）很像 List，都是将多个值存入一个个体的容器。但它们却有着本质的不同，一组数字的 List 就是一组数字，它们的类型相同，且不关心其中包含元素的数量。而Tuple 则要求你对需要组合的数据的数目非常的明确，它的类型取决于其中项的数目与其各自的类型。 Tuple 中的项由括号括起，并由逗号隔开。 另外的不同之处就是Tuple 中的项不必为同一类型，在Tuple 里可以存入多类型项的组合。 在Haskell中表示二维向量该如何？使用 List 是一种方法，它倒也工作良好。若要将一组向量置于一个 List 中来表示平面图形又该怎样？我们可以写类似 [ [ 1 , 2 ] , [ 8 , 11 ] , [ 4 , 5 ] ] 的代码来实现。但问题在于， [ [ 1 , 2 ] , [ 8 , 11 , 5 ] , [ 4 , 5 ] ] 也是同样合法的，因为其中元素的类型都相同。尽管这样并不靠谱，但编译时并不会报错。然而一个长度为 2 的 Tuple （也可以称作序对，Pair），是一个独立的类型，这便意味着一个包含一组序对的 List 不能再加入一个三元组，所以说把原先的方括号改为圆括号使用Tuple会 更好: [ ( 1 , 2 ) , ( 8 , 11 ) , ( 4 , 5 ) ]。若试图表示这样的图形： [ ( 1 , 2 ) , ( 8 , 11 , 5 ) , (4 , 5 ) ] ，就会报出以下的错误： Text12345Couldn&#x27;t match expected type `(t, t1)&#x27; against inferred type `(t2, t3, t4)&#x27; In the expression: (8, 11, 5) In the expression: [(1, 2), (8, 11, 5), (4, 5)] In the definition of `it&#x27;: it = [(1, 2), (8, 11, 5), (4, 5)] 同样，[ ( 1 , 2 ) , ( \" one \" , 2 ) ] 这样的 List 也不行，因为其中的第一个 Tuple 是一对数字，而第二个 Tuple 却成了一个字符串和一个数字。 Tuple 可以用来储存多个数据，如，我们要表示一个人的名字与年 龄，可以使用这样的 Tuple : ( \" Christopher \" , \" Walken \" , 55 )。从这个例子里也可以看出，Tuple 中也可以存储 List。 使用 Tuple 前应当事先明确一条数据中应该由多少个项。每个不同长度的 Tuple 都是独立的类型，所以你就不可以写个函数来给它追加元素。而唯一能做的，就是通过函数来给一个 List 追加序对，三元组或是四元组等内容。 可以有单元素的 List ，但 Tuple 不行。单元素的 Tuple 本身就只有一个值，对我们又有啥意义？不靠谱。 同 List 相同，只要其中的项是可比较的，Tuple 也可以比较大小，但是不可以比较不同长度的 Tuple 。如下是两个有用的序对操作函数： fst返回一个序对的首项。 1234ghci&gt; fst (8,11) 8 ghci&gt; fst (&quot;Wow&quot;, False) &quot;Wow&quot; snd返回序对的尾项。 1234ghci&gt; snd (8,11) 11 ghci&gt; snd (&quot;Wow&quot;, False) False Note：这两个函数仅对序对有效，而不能应用于三元组，四元组和五元组之上。稍后，我们将过一遍从Tuple中取数据的所有方式。 zip可以用来生成一组序对 (Pair) 的 List 。它取两个 List，然后将它们交叉配对，形成一组序对的 List 。它很简单，却很实用，尤其是你需要组合或是遍历两个 List时。如下是个例子： 1234ghci&gt; zip [1,2,3,4,5] [5,5,5,5,5] [(1,5),(2,5),(3,5),(4,5),(5,5)] ghci&gt; zip [1 .. 5] [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;] [(1,&quot;one&quot;),(2,&quot;two&quot;),(3,&quot;three&quot;),(4,&quot;four&quot;),(5,&quot;five&quot;)] 它把元素配对并返回一个新的 List 。第一个元素配第一个，第二个元素配第二个..以此类推。注意，由于序对中可以含有不同的类型，zip函数可能会将不同类型的序对组合在一起。若是两个不同长度的 List 会怎么样？ 12ghci&gt; zip [5,3,2,6,2,7,2,5,4,6,6] [&quot;im&quot;,&quot;a&quot;,&quot;turtle&quot;][(5,&quot;im&quot;),(3,&quot;a&quot;),(2,&quot;turtle&quot;)] 较长的那个会在中间断开，去匹配较短的那个。由于Haskell是惰性的，使用zip同时处理有限和无限的 List 也是可以的： 12ghci&gt; zip [1..] [&quot;apple&quot;, &quot;orange&quot;, &quot;cherry&quot;, &quot;mango&quot;] [(1,&quot;apple&quot;),(2,&quot;orange&quot;),(3,&quot;cherry&quot;),(4,&quot;mango&quot;)] 接下来考虑一个同时应用到 List 和 Tuple 的问题：如何取得所有三边长度皆为整数且小于等于10，周长为24的直角三角形？首先，把所有三遍长度小于等于 10 的三角形都列出来： Text1ghci&gt; let triangles = [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..10], a &lt;- [1..10] ] 刚才我们是从三个 List 中取值，并且通过输出函数将其组合为一个三元组。只要在 ghci 下边调用 triangle ，你就会得到所有三边都小于等于 10的三角形。我们接下来给它添加一个限制条件，令其必须为直角三角形。同时也考虑上b边要短于斜边，a边要短于b边情况： Text1ghci&gt; let rightTriangles = [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..c], a &lt;- [1..b], a^2 + b^2 == c^2] 已经差不多了。最后修改函数，告诉它只要周长为24的三角形。 Text12ghci&gt; let rightTriangles&#x27; = [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..c], a &lt;- [1..b], a^2 + b^2 == c^2, a+b+c == 24] ghci&gt; rightTriangles&#x27; [(6,8,10)] 得到正确结果！这便是函数式编程的一般思路：先取一个初始的集合并将其变形，执行过滤条件，最终取得正确的结果。 3 Haskell类型和类型类 3.1 类型 在前面我们谈到Haskell是静态类型的，在编译时每个表达式的类型都已明确，这就提高了代码的安全性。若代码中让布尔值与数字相除，就不会通过编译。这样的好处就是与其让程序在运行时崩溃，不如在编译时捕获可能的错误。Haskell中万物皆有类型，因此在执行编译之时编译器可以大有所为。 与java和pascal不同，haskell支持类型推导。写下一个数字，你就没必要另告诉haskell说“它是个数字”，它自己能推导出来。这样我们就不必在每个函数或表达式上都标明其类型了。在前面我们只简单涉及一下haskell的类型方面的知识，但是理解这一类型系统对于haskell 的学习是至关重要的。 类型是每个表达式都有的某种标签，它标明了这一表达式所属的范畴。例如，表达式True是boolean型，\"hello\"是个字符串，等等。 可以使用ghci来检测表达式的类型。使用:t命令后跟任何可用的表达式，即可得到该表达式的类型，先试一下： 12345678910ghci&gt; :t &#x27;a&#x27; &#x27;a&#x27; :: Char ghci&gt; :t True True :: Bool ghci&gt; :t &quot;HELLO!&quot; &quot;HELLO!&quot; :: [Char] ghci&gt; :t (True, &#x27;a&#x27;) (True, &#x27;a&#x27;) :: (Bool, Char) ghci&gt; :t 4 == 5 4 == 5 :: Bool 可以看出，:t命令处理一个表达式的输出结果为表达式后跟::及其类型，::读作“它的类型为”。凡是明确的类型，其首字母必为大写。'a'，如它的样子，是Char类型，易知是个字符（character）。True是Bool类型。检测\"hello\"得一个[Char]？这方括号表示一个List，所以我们可以将其读作“一组字符的List”。而与List不同，每个Tuple都是独立的类型，于是(True,\"a\")的类型是(Bool,Char)，而('a','b','c')的类型为(Char,Char,Char)。4==5一定返回 False，所以它的类型为Bool。 同样，函数也有类型。编写函数时，给它一个明确的类型声明是个好习惯，比较短的函数就不用多此一举了。还记得前面那个过滤大写字母的List Comprehension吗？给它加上类型声明便是这个样子： 12removeNonUppercase :: [Char] -&gt; [Char] removeNonUppercase st = [ c | c &lt;- st, c `elem` [&#x27;A&#x27;..&#x27;Z&#x27;]] removeNonUppercase的类型为[Char]-&gt;[Char]，从它的参数和返回值的类型上可以看出，它将一个字符串映射为另一个字符串。[Char]与String是等价的，但使用String会更清晰：removeNonUppercase :: String -&gt; String。编译器会自动检测出它的类型，我们还是标明了它的类型声明。要是多个参数的函数该怎样？如下便是一个将三个整数相加的简单函数。 12addThree :: Int -&gt; Int -&gt; Int -&gt; Int addThree x y z = x + y + z 参数之间由-&gt;分隔，而与返回值之间并无特殊差异。返回值是最后一项，参数就是前三项。稍后，我们将讲解为何只用-&gt;而不是Int,Int,Int-&gt;Int之类“更好看”的方式来分隔参数。 如果你打算给你编写的函数加上个类型声明却拿不准它的类型是啥，只要先不写类型声明，把函数体写出来，再使用:t命令测一下即可。函数也是表达式，所以:t对函数也是同样可用的。 如下是几个常见的类型： Int表示整数。7可以是Int，但7.2不可以。Int是有界的，也就是说它由上限和下限。对32位的机器而言，上限一般是214748364，下限是-214748364。 Integer也表示整数，但它是无界的。这就意味着可以用它存放非常非常大的数，我是说非常大。它的效率不如Int高。 12factorial :: Integer -&gt; Integer factorial n = product [1..n] Text12ghci&gt; factorial 50 30414093201713378043612608166064768844377641568960512000000000000 Float表示单精度的浮点数。 12345circumference :: Float -&gt; Float circumference r = 2 * pi * rghci&gt; circumference 4.0 25.132742 Double表示双精度的浮点数。 Text12345circumference&#x27; :: Double -&gt; Double circumference&#x27; r = 2 * pi * rghci&gt; circumference&#x27; 4.0 25.132741228718345 Bool表示布尔值，它只有两种值：True和False。 Char表示一个字符。一个字符由单引号括起，一组字符的List即为字符串。 Tuple的类型取决于它的长度及其中项的类型。注意，空Tuple同样也是个类型，它只有一种值：()。 3.2 类型变量 你觉得head函数的类型是啥？它可以取任意类型的List的首项，是怎么做到的呢？ 12ghci&gt; :t head head :: [a] -&gt; a 前面说过，凡是类型其首字母必大写，所以它不会是个类型。它是个类型变量，意味着a可以是任意的类型。这一点与其他语言中的泛型（generic）很相似，但在Haskell中要更为强大。它可以让我们轻而易举地写出类型无关的函数。使用到类型变量的函数被称作“多态函数 ”，head函数的类型声明里标明了它可以取任意类型的List并返回其中的第一个元素。 在命名上，类型变量使用多个字符是合法的，不过约定俗成，通常都是使用单个字符，如a,b,c,d... 还记得fst？ 12ghci&gt; :t fst fst :: (a, b) -&gt; a 可以看到fst取一个包含两个类型的Tuple作参数，并以第一个项的类型作为返回值。这便是fst可以处理一个含有两种类型项的pair的原因。注意，a和b是不同的类型变量，但它们不一定非得是不同的类型，它只是标明了首项的类型与返回值的类型相同。 3.3 类型类 如果一个类型属于某类型类，那它必实现了该类型类所描述的行为。很多从OOP走过来的人们往往会把类型类当成面向对象语言中的类而感到疑惑，但它们不是一回事。易于理解起见，可以把它看做是java中接口（interface）的类似物。 ==函数的类型声明是怎样的？ 12ghci&gt; :t (==) (==) :: Eq a =&gt; a -&gt; a -&gt; Bool Note:判断相等的==运算符是函数，+-\\*/之类的运算符也是同样。在默认条件下，它们多为中缀函数。若要检查它的类型，就必须得用括号括起使之作为另一个函数，或者说以前缀函数的形式调用它。 在这里我们见到个新东西：=&gt;符号。它左边的部分叫做类型约束。我们可以这样阅读这段类型声明：“相等函数取两个相同类型的值作为参数并返回一个布尔值，而这两个参数的类型同在Eq类之中（即类型约束）” Eq这一类型类提供了判断相等性的接口，凡是可比较相等性的类型必属于Eq类。 12345678910ghci&gt; 5 == 5 True ghci&gt; 5 /= 5 False ghci&gt; &#x27;a&#x27; == &#x27;a&#x27; True ghci&gt; &quot;Ho Ho&quot; == &quot;Ho Ho&quot; True ghci&gt; 3.432 == 3.432 True elem函数的类型为:(Eq a)=&gt;a-&gt;[a]-&gt;Bool。（竹夭曰：现在是elem :: (Foldable t, Eq a) =&gt; a -&gt; t a -&gt; Bool）这是它在检测值是否存在于一个list时使用到了==的缘故。 几个基本的类型类： Eq包含可判断相等性的类型。提供实现的函数是==和/=。所以，只要一个函数有Eq类的类型限制，那么它就必定在定义中用到了==和/=。刚才说了，除函数以外的所有类型都属于Eq，所以它们都可以判断相等性。 Ord包含可比较大小的类型。除了函数以外，我们目前所谈到的所有类型都属于Ord类。Ord包中包含了&gt;, &lt;, =之类用于比较大小的函数。compare函数取两个Ord类中的相同类型的值作参数，返回比较的结果。这个结果是如下三种类型之一：GT, LT, EQ。 12ghci&gt; :t (&gt;) (&gt;) :: (Ord a) =&gt; a -&gt; a -&gt; Bool 类型若要成为Ord的成员，必先加入Eq家族。 12345678ghci&gt; &quot;Abrakadabra&quot; &lt; &quot;Zebra&quot; True ghci&gt; &quot;Abrakadabra&quot; `compare` &quot;Zebra&quot; LT ghci&gt; 5 &gt;= 2 True ghci&gt; 5 `compare` 3 GT Show的成员为可用字符串表示的类型。目前为止，除函数以外的所有类型都是Show的成员。操作Show类型类，最常用的函数表示show。它可以取任一Show的成员类型并将其转为字符串。 123456ghci&gt; show 3 &quot;3&quot; ghci&gt; show 5.334 &quot;5.334&quot; ghci&gt; show True &quot;True&quot; Read是与Show相反的类型类。read函数可以将一个字符串转为Read的某成员类型。 12345678ghci&gt; read &quot;True&quot; || False True ghci&gt; read &quot;8.2&quot; + 3.8 12.0 ghci&gt; read &quot;5&quot; - 2 3 ghci&gt; read &quot;[1,2,3,4]&quot; ++ [3] [1,2,3,4,3] 一切良好，如上的所有类型都属于这一类型类。尝试read \"4\"又会怎样？（竹夭曰：这里报错是因为“4”没有被用到，编译器不能确定“4”是什么类型） Text12345ghci&gt; read &quot;4&quot; &lt; interactive &gt;:1:0: Ambiguous type variable `a&#x27; in the constraint: `Read a&#x27; arising from a use of `read&#x27; at :1:0-7 Probable fix: add a type signature that fixes these type variable(s) ghci跟我们说它搞不清楚我们想要的是什么样的返回值。注意调用read后跟的那部分，ghci通过它来辨认其类型。若要一个boolean值，他就知道必须得返回一个Bool类型的值。但在这里它只知道我们要的类型属于Read类型类，而不能明确到底是哪个。看一下read函数的类型声明吧： 12ghci&gt; :t read read :: (Read a) =&gt; String -&gt; a 它的返回值属于Read类型类，但我们若用不到这个值，编译器就永远都不会得知该表达式的类型。所以我们需要在一个表达式后跟::的类型注释，以明确其类型。如下： 12345678910ghci&gt; read &quot;5&quot; :: Int 5 ghci&gt; read &quot;5&quot; :: Float 5.0 ghci&gt; (read &quot;5&quot; :: Float) * 4 20.0 ghci&gt; read &quot;[1,2,3,4]&quot; :: [Int] [1,2,3,4] ghci&gt; read &quot;(3, &#x27;a&#x27;)&quot; :: (Int, Char) (3, &#x27;a&#x27;) 编译器可以辨认出大部分表达式的类型，但遇到read \"5\"的时候它就搞不清楚究竟该是Int还是Float了。只有经过运算，Haskell才会明确其类型；同时由于Haskell是静态的，它还必须得在编译前搞清楚所有值的类型，所以我们最好提前告诉编译器。 Enum的成员都是连续的类型--也就是可枚举。Enum类存在的主要好处就在于我们可以在Range中用到它的成员类型：每个值都有后继子（successer）和前置子（predecesor），分别可以通过succ函数和pred函数得到。该类型类包含的类型有：(),Bool,Char,Ordering,Int,Integer,Float和Double。 12345678ghci&gt; [&#x27;a&#x27;..&#x27;e&#x27;] &quot;abcde&quot; ghci&gt; [LT .. GT] [LT,EQ,GT] ghci&gt; [3 .. 5] [3,4,5] ghci&gt; succ &#x27;B&#x27; &#x27;C&#x27; Bounded的成员都有一个上限和下限。 12345678ghci&gt; minBound :: Int -2147483648 ghci&gt; maxBound :: Char &#x27;\\1114111&#x27; ghci&gt; maxBound :: Bool True ghci&gt; minBound :: Bool False minBound和maxBound函数很有趣，它们的类型都是(Bounded a) =&gt; a。可以说，它们都是多态常量。 如果其中的项都属于Bounded类型类，那么该Tuple也属于Bounded 。 12ghci&gt; maxBound :: (Bool, Int, Char) (True,2147483647,&#x27;\\1114111&#x27;) Num是表示数字的类型类，它的成员类型都具有数字的特征。检查一个数字的类型： 12ghci&gt; :t 20 20 :: (Num t) =&gt; t 所有的数字都是多态常量，他们可以作为所有Num类型类中的成员类型。以上便是Num类型类中包含的所有类型，检测*运算符的类型，可以发现它可以处理一切的数字： 12ghci&gt; :t (*) (*) :: (Num a) =&gt; a -&gt; a -&gt; a 它只取两个相同类型的参数。所以(5 :: Int) * (6 :: Integer)会引发一个类型错误，而5 * (6 :: Integer)就不会有问题。 类型只有继承Show和Eq，才可以加入Num。 Integral同样是表示数字的类型类。Num包含所有的数字：实数和整数。而Intgral仅包含整数，其中的成员类型有Int和Integer。Floating仅包含浮点类型：Float和Double。 有个函数在处理数字时会非常有用，它便是fromIntegral。其类型声明为：fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b。从中可以看出，它取一个整数做参数并返回一个更加通用的数字，这在同时处理整数和浮点时会尤为有用。举例来说，length函数的类型声明为：length :: [a] -&gt; Int，而非更通用的形式，如(Num b) =&gt; length :: [a] -&gt; b。这应该是历史原因，如果取了一个List长度的值再给它加3.2就会报错，因为这是将浮点数和整数相加。面对这种情况，我们就用fromIntegral (length [1,2,3,4]) + 3.2来解决。 注意到，fromIntegral的类型声明中用到了多个类型约束。如你所见，只要将多个类型约束放到括号里用逗号隔开即可。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Haskell","slug":"Haskell","permalink":"https://shymuel.top/tags/Haskell/"}]},{"title":"【AnalogueElectronics2】课程笔记","slug":"【AnalogueElectronics2】课程笔记","date":"2022-08-21T02:24:08.000Z","updated":"2022-08-21T02:42:41.425Z","comments":true,"path":"2119635949.html","link":"","permalink":"https://shymuel.top/2119635949.html","excerpt":"","text":"0 Online Syllabus Block 1: block models of analogue; op-amps（运放）. Block 2: Diodes. Block 3: Transistors Bipolar and field effect transistor; Transistor biasing circuits; Analysis of small-signal AC circuits. 这篇博文只是我的课程笔记，所以不可能达到课件那种精细程度，还请读者海涵。 1 Block 1 1.1 Amplifiers Amplifiers from system prospective; Bode Plot; Decibels and how we can understand them. Matching conditions：放大器输入电阻远大于电源电阻，放大器输出电阻远小于负载电阻。 Amplifier Classifications Type Input Output Gain Matching Conditions Voltage V V \\(K_v=\\frac{V_{out}}{V_{in}}\\) \\(R_{in}\\gg R_s(\\infty)\\) \\(R_{O}\\gg R_L(0)\\) Current I I \\(K_I=\\frac{I_{out}}{I_{in}}\\) \\(R_{in}\\ll R_s(0)\\) \\(R_{O}\\gg R_L(\\infty)\\) Transresistance I V \\(R_m=\\frac{V_{out}}{I_{in}}\\) \\(R_{in}\\ll R_s(0)\\) \\(R_{O}\\ll R_L(0)\\) Transconductance V I \\(G_m=\\frac{I_{out}}{V_{in}}\\) \\(R_{in}\\gg R_s(\\infty)\\) \\(R_{O}\\gg R_L(\\infty)\\) Efficiency: 功率，用\\(\\eta\\)表示。 \\(P_{in}+P_{DC}=P_L+P_{diss}\\)；\\(\\eta=\\frac{P_L}{P_{DC}}\\times 100\\%\\). 单端or多端输入输出。 波特图：展示放大器的频率响应。Gain用分贝表示，横轴是log10为底的频率。 典型的放大器： 通频带，放大倍数和频率无关； 上限截止频率和下限截止频率，增益比中频段少3分贝。 分贝：dB，放大器增益的单位。电学中的分贝定义的是信号放大倍数的对数，对电压（电流）与功率放大倍数的定义是不同的。 电压（电流）放大倍数分贝数定义：\\(K=20\\log\\left|\\frac{V_O}{V_I}\\right|\\)； 功率放大倍数分贝数定义：\\(K=10\\log\\left|\\frac{P_O}{P_I}\\right|\\)。 \\(K&lt;0\\)，信号被衰减；\\(K&gt;0\\)，信号被放大。 Negative gain indicates a phase change of \\(180^o\\) between input and output signals. 截止频率是-3dB的情形，相当于输出功率变为输入功率的一半，输出电压或电流变为输入的0.707倍。 dBm是分贝毫瓦，代指功率的绝对值。\\(0\\operatorname{dBm}=1\\operatorname{mW}\\)。 放大器系统的频率响应： 完美耦合情况下的信号增益； 造成信号损失的因素，可能是因为不完美耦合或故意造成衰减。 要得到总的频率响应，只需将波特图叠加到一起。 例题：介绍了串级系统如何计算增益，以及如何设计得到所需增益的电路。 1.2 Operational Amplifiers 运算放大器：接近理想的直流放大器。用来信号整理，滤波和数学运算。运算有加减，积分和微分。 理想运算放大器的三个特性： infinite gain; infinite input impedance; zero output impedance. \\(V_O=A_{OL}*(V_1-V_2)\\) \\(A_{OL}\\)：开环增益；\\(Z_{in}\\)：输入电阻；\\(Z_{out}\\)：输出电阻；Bandwidth：通频带；Offset Voltage：漂移电压；Common mode rejection ratio：共模抑制比，差模电压放大倍数/共模电压放大倍数。 current rule：虚断；voltage rule：虚短，同相输入端和反向输入端之间电压差为0； GBP：指定频率出的带宽和增益的乘积。GBP是一个定值，故可以反过来用GBP求特定增益对应的频率。 Inverting amplifiers：反相放大器。 运算放大器的关键指标；GBP，如果运放开环增益始终满足-20dB/10倍频，也就是频率提高10倍，开环增益变为0.1倍，那么它们的乘积将是一个常数。\\(GBP=BW\\times A\\)。BW和A都不用分贝表示。 放大器电路的输入电阻的计算； 正增益电路 负增益电路 1.3 Differential Amplifiers 差分放大电路 用叠加原理，依次将V1、V2置为0，观察其对Vout的影响。 \\(Gain=\\frac{V_{out}}{V_2-V_1}\\)； 但是，差分放大电路有个问题，即输入电阻较小。输入电阻看定义谁是Ui，然后看一下输入电流是多少。解决输入电阻小的问题，可以利用电压跟随器。 Instrumentation Amplifier 测量放大器 测量放大器 1.4 Filters 电容电感电路的阻抗 Ideal Low Pass Filter, Ideal High Pass Filter, Band Pass Filter. Active LPF: Provides Gain, Op-Amps or Transistors; Passive LPF: No Gain, R or C or L. 这里要开始求频率响应。 \\(f=\\frac{1}{T}=\\frac{\\omega}{2\\pi}\\)； 引入运放构成滤波器：电压关系用阻抗来计算。 电容加在R2是低通，加在R1是高通。R1R2都加电容就有了带通滤波器。中间还有相位差是0对应的频率。 \\(1F=10^{3}mF=10^{6}\\mu F=10^{9}nF=10^{12}pF\\) 画波特图。感觉是和自控里面一样的。 Schmitt Triger：将周期信号变成方波。 Astable Multivibrator based Schmitt Triger. 求振荡器的充放电时间。 Astable Relaxation Oscillator: 这一节考察充放电时间。 多谐振荡器充放电示意图 Op-amp Monostable Pulse Generator 单稳态触发器。 It has one stable and one quasi-stable state. Output voltage will remain at that stable state unless an external triggering pulse causes a transmission to quasi-stable state. After certain time T, output will return to its stable state. It got its name from the fact that only one of its output states is stable. It is also known as a 'one-shot'. 这个超级有意思，15-(-15)变成30V，然后Vx本来是0，要瞬间加上一个30V的大电压。如果从+15变成-15，Vx要瞬间减少30V。 2 Block 2 二极管电压计算公式： \\(\\begin{aligned} I_{D} &amp;=I_{O}\\left[\\exp \\left(\\frac{V_{D}}{V_{T}}\\right)-1\\right] \\\\ I_{D} &amp;=I_{O}\\left[\\exp \\left(\\frac{V_{D}}{V_{T}}\\right)\\right] \\\\ \\ln \\left(I_{D}\\right) &amp;=\\ln \\left[I_{O}\\left[\\exp \\left(\\frac{V_{D}}{V_{T}}\\right)\\right]\\right] \\\\ &amp;=\\ln I_{O}+\\left[\\left(\\frac{V_{D}}{V_{T}}\\right)\\right] \\end{aligned}\\) 二极管建模：理想二极管+常值电压+串联电阻。 三种等效模型：理想二极管，理想二极管+常值电压，理想二极管+常值电压+串联电阻。 二极管的教学视频 二极管将正弦整流成DC。这个DC为啥除以π，没看懂。 全波整流桥式电路：直流电压是0.637Vmax。 https://www.electronics-tutorials.ws/diode/diode_6.html voltage doubler circuit：电压翻倍电路。钳位电路+半波整流电路。 倍压整流电路。 3 Block 3 双极型晶体管：NPN, PNP；场效应管：N沟道，P沟道。 场效应管：源极（source, S），栅极（gate, G），漏极（drain, D）。MOSFET的控制端称为栅极，源极和漏极是对称的，命名来自于电流方向。电流从漏极流向源极，即电压高的一端为漏极。 场效应管的S模型 \\(V_{GS}\\)高于阈值电压VT时，元件导通，否则关断。N沟道MOSFET的典型VT是0.7V。iG永远为0。 如果\\(v_{\\mathrm{DS}}&lt;v_{\\mathrm{GS}}-V_{\\mathrm{T}}\\)，则工作在数电状态，称为三极管区域，这时可以将场效应管视为SR模型，电流随Vd线性增加。 \\(v_{\\mathrm{DS}}\\geq v_{\\mathrm{GS}}-V_{\\mathrm{T}}\\)的区域称为饱和区域，电流曲线会变得扁平。 双极型晶体管：两种管的图像。Vbe=0.6V。截止区，放大区，饱和区。 Active Region, Saturation, Cut-off. 理想情况下集电极电流和Vc无关，实际上是有依赖的。装置的电导有限。 双极型晶体管和场效应管的对比： 双极型晶体管同时利用电子和空穴，是双极型管。 场效应管只用电子或空穴，是单极性的。 电流控制电流的器件。 电压控制电流的器件。 输入基于b和e，像一个前向PN结，输入电阻小。 g和s之间像电容，输入电阻大。 双极型二极管作为放大器：Uc&gt;Ub&gt;Ue b极增加正弦信号，ib变化会引起ic变化，然后引起Uce反向变化。 放大器分析的要点： 静态工作点选好，让晶体管工作在放大区； 输入一个小信号。 因为放大倍数β是一个难以控制的量，所以应该选择Ic而不是Ib。电路也变化了： 计算电路中各个值 计算电路中各个值 电阻系列的变化方式：E12，E6，E24。 现在开始学双极型晶体管放大电路的交流通路……注意，电容在交流电的时候相当于短路。 基于场效应管的放大电路，输出电压从源极引出。 4 常用名词对照表 Operational Amplifiers 运算放大器 Systems Perspective 系统视角 overall gain 总增益 frequency response 频率响应 passband 通频带 Bode Plots 波特图 milliWatt(dBm) 毫瓦特 decibels(dB) 分贝 Cascaded Systems 串级系统 cut-off 截止 Inverting 反向放大电路 Non-Inverting 正向放大电路 Differential Amplifier 差分放大电路 Instrumentation Amplifier 测量放大器 Low Pass Filter 低通滤波器 High Pass Filter 高通滤波器 Band Pass Filter 带通滤波器 Schmitt Triger 施密特触发器 Astable Multivibrator 不稳多谐振荡器 Op-amp Monostable Pulse Generator 单稳态脉冲触发器 Diodes 二极管 Transistors 晶体管 Bipolar Transistors 双极型晶体管 Field Effect Transistors 场效应管","categories":[{"name":"课程笔记","slug":"课程笔记","permalink":"https://shymuel.top/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"模电","slug":"模电","permalink":"https://shymuel.top/tags/%E6%A8%A1%E7%94%B5/"}]},{"title":"【Git使用】入门知识","slug":"【Git使用】入门知识","date":"2022-07-22T16:55:46.000Z","updated":"2022-08-21T02:46:15.091Z","comments":true,"path":"3586729497.html","link":"","permalink":"https://shymuel.top/3586729497.html","excerpt":"","text":"软件准备：下载Git Bash并注册Git账号。 在某个位置，右键单击空白处，点击Git Bash Here，配置用户名和邮箱： Text123456git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx&quot;# 如果不放心可以输入以下命令检查自己的用户名和邮箱git config user.namegit config user.email 0 上传项目到Gitee 参考资料：Git入门使用。 上传项目可以分成3步：在Gitee网页中创建远程仓库，将本地代码上传到本地仓库，将本地代码上传到远程仓库。 首先在Gitee上创建该项目的远程仓库，此处不讲。 接着进行本地项目上传到本地仓库的这一步。在项目文件夹中右键单击空白处，点击Git Bash Here。逐条输入以下命令： Text123git init # 初始化本地仓库git add . # 注意这里有个点git commit -m &#x27;本次提交的说明&#x27; # 说明信息为必填项，信息最好有意义，便于后期理解 要将本地仓库上传到远程仓库，首先要将本地仓库与远程仓库相连接。 在远程仓库复制http链接，然后输入下列命令（xxx为刚才复制的链接）： Text123git remote add origin xxx # 远程链接仓库git pull --rebase origin master # 强制更新远程仓库git push -u origin master # 将本地仓库中的文件推送到远程仓库 最后回到Gitee网页，刷新一下即可！ 下面开始是黑马程序员的教程。因为原教程很多内容用不到，故只看完了P1-P10。 1 Git 基础 Git是目前世界上最先进的分布式版本控制系统。 Git下载和安装： 下载地址； 使用默认值安装； 资源管理器内单击鼠标右键选择Git Bash Here ； 输入git --version 检查是否安装成功。 2 Git基本工作流程及命令 2.1 Git中的文件位置 文件的位置改变：工作区→暂存区→本地仓库→远程仓库。 工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹。添加、编辑、修改文件等动作。 暂存区(Index/Stage)：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。.git文件夹中包含了两个部分，一个是暂存区(Index 或者 Stage)，顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里。 本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中。 远程仓库：项目代码在远程git服务器上的位置。比如项目在github上就是放在一个远程仓库中，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可。 日常开发时代码放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将文件提交给暂存区(Index/Stage)，也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。 因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆： git管理配置的命令； 工作区与暂存区的交互； 暂存区与本地仓库（分支）上的交互； 本地仓库与远程仓库的交互。 工作目录 暂存区 git仓库 远程仓库 被 Git 管理的项目 临时存放被修改的文件 目录用于存放提交记录 远程代码仓库 git init git add git commit git push 2.2 Git使用前的配置命令 在使用前告诉git你是谁： 第一次使用git，配置用户信息： 配置用户名：git config --global user.name \"用户名\"； 配置用户邮箱：git config --global user.email \"邮箱地址\"。 查询配置信息： 查询用户名（查询邮箱同理）：git config --global user.name； 列出当前配置：git config --list； 列出repository配置：git config --local --list； 列出全局配置：git config --global --list； 列出系统配置：git config --system --list。 其他配置： 配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：git config --global merge.tool vimdiff； 配置git命令输出为彩色的：git config --global color.ui auto； 配置git使用的文本编辑器：git config --global core.editor vi。 注：也可直接修改：C:\\Users\\用户\\.gitconfig 。 2.3 工作区上的操作命令 新建仓库： 将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：git init； 从远程git仓库复制项目：git clone 远程仓库地址 ； 克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名，如：git clone git://github.com/wasd/example.git NewName； 查看文件状态：git status。 查新信息： 查询当前工作区所有文件的状态：git status; 比较工作区中文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff； 提交文件到暂存区：git add 文件/文件列表 。 提交文件到暂存区： 提交当前目录所有文件到暂存区：git add .； 提交当前目录指定文件到暂存区：git add 文件名1 文件名2 文件名3； 提交当前目录某个文件夹中所有文件到暂存区：git add [dir]； 提交文件到仓库（或者叫版本库）： 将暂存区中的文件提交到本地仓库中，即打上新版本：git commit -m \"commit_info\"； 将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：git commit -a -m \"commit_info\"； 提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：git commit --amend； 查看版本差异和回退历史记录： 比较暂存区与上一版本的差异：git diff --cached; 指定文件在暂存区和本地仓库的不同：git diff --cached 文件1; 查看提交历史：git log或git log --pertty=oneline。推荐用第二个命令，显示结果更简洁。可以用参数-p规定显示多少次提交的内容差异，比如-2表示显示最近的两次更新，如git log -p -2。 回退到某个版本（覆盖暂存区和工作目录）：git reset --hard 提交编号。 注意：回退到过去版本之后，要想回到之前最新的版本，需要使用指令git reflog去查看历史操作，以得到最新的commit_id，此时的commit_id没有显示全，但是仍然可以用，至少要前4位。 删除和修改文件： 用暂存区中的文件覆盖工作目录中的文件：git checkout -- 文件名 。不加 -- 文件名则覆盖全部文件。 将文件从暂存区中删除，但是工作区还有该文件：git rm --cached 文件名 。 删除工作区文件，并且也从暂存区删除对应文件的记录：git rm 文件名 。 取消暂存区已经暂存的文件：git reset HEAD ...。 撤销操作： 如果想保留上一次的修改以备以后继续工作，可以使用储藏(stashing)和分支来处理。其中储藏可以理解为在不commit的情况下保存自己的工作，之后可以切换分支。储藏的具体讲解可以看博客1和博客2。 将当前代码储藏，以便能够切换分支：git stash。 查看当前所有的储藏：git stash list。 应用最新的储藏：git stash apply。如果想应用某个特定版本的储藏：git stash apply stash@&#123;2&#125;。其中stash@&#123;2&#125; 是储藏编号。apply命令只是应用储藏，而储藏的内容仍然还在栈上。 删除指定的储藏：git stash drop stash&#123;0&#125;。 删除所有的储藏：git stash clear。 如果想在恢复内容的同时将储藏从栈中删除，可以使用pop：git stash pop。 在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于stash unapply的命令，但是可以通过取消该储藏的补丁达到同样的效果：git stash show -p stash@&#123;0&#125; | git apply -R。 如果你沒有指定具体的某个储藏，Git会取消最近的储藏：git stash show -p | git apply -R。 更新文件： 重命名文件，并将已改名文件提交到暂存区：git mv [file-original] [file-renamed]; 3 Git进阶 3.1 分支 生成副本，避免影响开发主线。 分支的类别： 主分支(master)：第一次向git仓库提交更新记录时自动产生的一个分支。 开发分支(develop)：作为开发的分支，基于master分支创建。 功能分支(feature)：作为开发具体功能的分支基于开发分支创建。 注意修改某分支文件后要commit后再切换分支，否则某分支的文件会出现在其他分支里。 3.2 分支命令 查看本地仓库的所有分支：git branch。 创建分支：git branch 分支名称。新建并切换到新建分支上：git checkout -b 分支名词 。 切换分支：git checkout 分支名称。 合并分支：git merge 来源分支。 删除分支（分支合并后才允许被删除，但可以用-D强制删除）：git branch -d 分支名称。 git push origin :branch-name : 远程仓库同步删除分支 查看各个分支最后一个提交对象的信息：git branch -v; 查看哪些分支已经合并到当前分支：git branch --merged; 查看当前哪些分支还没有合并到当前分支：git branch --no-merged; 把远程分支合并到当前分支：git merge /，如git merge origin/serverfix；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进(Fast forward)，而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交。 4 Github 注册Github账号：略。 多人协作开发流程： A在自己的计算机中创建本地仓库； A在GitHub中创建远程仓库； A将本地仓库推送到远程仓库； B克隆远程仓库到本地进行开发； B将本地仓库开发内容推送到远程仓库； A将远程仓库中的最新内容拉去本地。 Github中创建远程仓库：略。 4.1 推送代码 前面已经说过，从远程仓库拷贝代码是用git clone命令。 推送代码到远程仓库： Text123456git push 远程仓库地址 分支名称git push 远程仓库地址别名 分支名称git push -u 远程仓库地址别名 分支名称 # -u表示记住推送地址和分支，下次只需要输入git pushgit remote add 远程仓库地址别名 远程仓库地址 删除别名：git remote remove 远程仓库地址别名 。 第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。 本地仓库上的操作： 查看本地仓库关联的远程仓库：git remote；在克隆完每个远程仓库后，远程仓库默认为origin；加上-v的参数后，会显示远程仓库的url地址； 添加远程仓库，一般会取一个简短的别名：git remote add [remote-name] [url]，比如：git remote add example git://github.com/example/example.git; 从远程仓库中抓取本地仓库中没有的更新：git fetch [remote-name]，如git fetch origin；使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，需要人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用git pull来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支； 将本地仓库某分支推送到远程仓库上：git push [remote-name] [branch-name]，如git push origin master；如果想将本地分支推送到远程仓库的不同名分支：git push :，如git push origin serverfix:awesomebranch;如果想删除远程分支：git push [romote-name] :，如git push origin :serverfix。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。 查看远程仓库的详细信息：git remote show origin； 修改某个远程仓库在本地的简称：git remote rename [old-name] [new-name]，如git remote rename origin org； 移除远程仓库：git remote rm [remote-name]； 4.2 拉取远程仓库中的代码 克隆远程仓库到本地：git clone 仓库地址 。 拉取远程仓库最新版本到本地：git pull 远程仓库地址 分支名称 。","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"代码管理","slug":"代码管理","permalink":"https://shymuel.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"}]},{"title":"【Python】Collections","slug":"【Python】Collections","date":"2022-05-01T14:22:23.000Z","updated":"2022-08-21T02:48:26.926Z","comments":true,"path":"1245507953.html","link":"","permalink":"https://shymuel.top/1245507953.html","excerpt":"","text":"这个库内含多种容器。 1 defaultdict 它解决的是我们使用dict当中最常见的问题，就是key为空的情况，访问一个dict中不存在的key会导致系统抛出异常。 dict当中为我们提供了带默认值的get方法。比如，可以写成： 1return dict.get(key, None) 这样，当key不在dict当中存在的时候，会自动返回设置的默认值。这省去了很多麻烦的判断，但是在一些特殊情况下仍然存在一点问题。比如当希望将key相同的value存进一个list当中而不是只保留一个，需要写成： 1234567data = [(1, 3), (2, 1), (1, 4), (2, 5), (3, 7)]d = &#123;&#125;for k, v in data: if k in d: d[k].append(v) else: d[k] = [v] 或者： 1234for k, v in data: cur = d.get(k, []) cur.append(v) d[k] = cur 为了完美解决这个问题，可以使用collections当中的defaultdict： 12345from collections import defaultdictd = defaultdict(list)for k, v in data: d[k].append(v) 使用defaultdict之后，如果key不存在，容器会自动返回预先设置的默认值。需要注意的是 defaultdict 传入的默认值可以是一个类型也可以是一个方法。如果传入int，默认值会被设置成int()的结果，也就是0。如果想要自定义或者修改，可以传入一个方法，比如： 1234d = defaultdict(lambda: 3)for k, v in data: d[k] += v 2 Counter 对数据进行统计。只需要一行代码即可统计一个list中的内容： 1234567words = [&#x27;apple&#x27;, &#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;watermelon&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;]from collections import Countercounter = Counter(words)&gt;&gt;&gt; print(counter)Counter(&#123;&#x27;apple&#x27;: 2, &#x27;pear&#x27;: 2, &#x27;watermelon&#x27;: 1, &#x27;peach&#x27;: 1&#125;) 上面的代码直接将一个list传入Counter中作为参数，它会自动给每个元素计数。 筛选topK也非常简单，Counter 提供了most_common()方法，只需要传入需求的K即可： 123counter.most_common(1)[(&#x27;apple&#x27;, 2)] 除此之外，Counter的构造函数还接收dict类型。可以直接通过一个value是int类型的dict来初始化一个Counter，比如： 12c = Counter(&#123;&#x27;apple&#x27;: 5, &#x27;pear&#x27;: 4&#125;)c = Counter(apple=4, pear=3) 并且，Counter还支持加减法的操作。两个Counter相加时会自动合并，即相同的key对应的value累加。相减也是同理，会将能对应的value做减法，被减的key中没有对应的会保留，而减数中没有对应的key则会被丢弃。并且需要注意，Counter支持value为负数。 3 deque queue是队列，deque是双端队列。deque的队首和队尾都支持元素的插入和弹出。 除了常用的clear、copy、count、extend等api之外，deque当中最常用也是最核心的api还有append、pop、appendleft和popleft。append和pop与list的append和pop一样是在队尾进行操作，而appendleft和popleft则是在队列左侧，也就是队首进行pop和append的操作。 真正用到双端队列的算法不太多，使用deque主要有两个原因。第一个原因是deque收到GIL的管理，它是线程安全的。而list则没有GIL锁，因此不是线程安全的。也就是说在并发场景下，list可能会导致一致性问题，而deque不会。另一个原因是deque支持固定长度，当长度满了之后继续append时，它会自动弹出最早插入的数据。 当拥有海量的数据，想要保留最后出现的指定数量的数据的时候，就可以使用deque： 12345from collections import dequedque = deque(maxlen=10)# 假设我们想要从文件当中获取最后10条数据for i in f.read(): dque.append(i) 4 namedtuple namedtuple很特殊，涉及到元编程的概念。 常见的面向对象是定义类，然后通过类的构造函数来创建实例。元编程指的是定义元类，根据元类创建出一个类。如果用模具和成品来分别比喻类和实例的话，元类相当于是模具的模具。 namedtuple是一个非常简单的元类，通过它可以非常方便地定义想要的类。 比如如果我们想要定义一个学生类，这个类当中有name、score、age这三个字段，那么这个类会写成： 12345class Student: def __init__(self, name=None, score=None, age=None): self.name = name self.score = score self.age = age 这只是粗略的写法，如果考虑规范还需要定义property等注解，又需要很多代码。使用namedtuple可以简化这个工作： 1234567from collections import namedtuple# 这个是类，columns也可以写成&#x27;name score age&#x27;，即用空格分开Student = namedtuple(&#x27;Student&#x27;, [&#x27;name&#x27;, &#x27;score&#x27;, &#x27;age&#x27;])# 这个是实例student = Student(name=&#x27;xiaoming&#x27;, score=99, age=10)print(student.name) 通过使用namedtuple，只用一行就定义了一个类。还可以通过传入defaults参数来定义缺省值： 1Student = namedtuple(&#x27;Student&#x27;, [&#x27;name&#x27;, &#x27;score&#x27;, &#x27;age&#x27;], defaults=(0, 0)) 可以注意到，虽然定义了三个字段，但是只设置了两个缺失值。在这种情况下，namedtuple会自动将缺失值匹配上score和age两个字段。因为在Python的规范当中，必选参数一定在可选参数前面。所以nuamdtuple会自动右对齐。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"Python","permalink":"https://shymuel.top/tags/Python/"}]},{"title":"【C++】零散知识点","slug":"【C++】零散知识点","date":"2022-04-17T13:50:37.000Z","updated":"2022-08-21T02:45:02.226Z","comments":true,"path":"348283507.html","link":"","permalink":"https://shymuel.top/348283507.html","excerpt":"","text":"1 C++中的注释 单行注释： 1// 这是单行注释 多行注释： 12345/** 这是多行注释的第一行* 这是多行注释的第二行* &quot;*&quot;不是必须的，但加上会显得整齐些*/ 条件注释： 1234// 0为条件参数#if 0 code#endif 为代码撰写注释： 123456789101112131415161718/** 写在代码开头* 代码功能、版权、作者、编写日期等*/// 写在代码块前面的注释：内容为大段的解释信息/// 当使用visual的时候，可以在函数上方直接打三个斜杠，然后就会获得……/// &lt;summary&gt;/// 求a和b的和/// &lt;/summary&gt;/// &lt;param name=&quot;a&quot;&gt;被加数&lt;/param&gt;/// &lt;param name=&quot;b&quot;&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;int sum(int a, int b) &#123; return a + b;&#125; 但是肉眼可见的，上面的注释风格实在是太丑了，这能忍？好消息是Visual Studio 2019给我们提供了注释风格的选项，路径为【工具 / 选项 / 文本编辑器 / C/C++ / 代码样式 / 常规】，在这里面可以选择注释风格，理论上来说\"///\"是最快捷的，但我还是觉得难看，选择了\"/**\"的注释风格： 123456789/** * @brief 求和 * @param a * @param b * @return */int sum(int a, int b) &#123; return a + b;&#125; 快速将一部分代码注释掉：选中代码，ctrl+k，ctrl+c，或者ctrl+k+c三个键一起按。 取消注释：选中代码，ctrl+k，ctrl+u，或者ctrl+k+u三个键一起按。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"C","permalink":"https://shymuel.top/tags/C/"}]},{"title":"【Python】面向对象","slug":"【Python】面向对象","date":"2022-04-08T03:41:06.000Z","updated":"2022-08-21T02:50:20.790Z","comments":true,"path":"3267076484.html","link":"","permalink":"https://shymuel.top/3267076484.html","excerpt":"","text":"0 面向对象相关概念 面向对象(Object Oriented)：软件开发方法，一种编程范式。 类(Class)：具有相同的属性和方法的对象的集合，它的定义中包含该集合中每个对象所共有的属性和方法。对象是指类的实例。 类变量：类变量定义在类中且在函数体之外，通常不作为实例变量使用。该变量的值由该类的所有对象共享。 数据成员：类变量或者实例变量，用于处理类及其实例对象的相关的数据。 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖(override)，也称为方法的重写。 局部变量：定义在方法中的变量，只作用于当前实例的类。 实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。 继承：即一个派生类(derived class)继承基类(base class)的变量和方法，Python也允许把一个派生类的对象作为一个基类对象对待。 实例化：创建一个类的实例，即创建类的一个具体对象。 方法：类中定义的函数。 对象：通过类定义的数据结构实例。对象包括数据成员（类变量和实例变量）和方法。 1 类的基础 1.1 定义类 Python中使用class语句来定义一个新类，class之后为类的名称并以冒号结尾: 123class ClassName: &#x27;类的帮助信息&#x27; # 类文档字符串 class_suite # 类体 类的帮助信息可以通过ClassName.__doc__查看，class_suite由类成员，方法，数据属性组成。 一个简单的Python类的例子： 1234567891011121314class Employee: &#x27;所有员工的基类&#x27; empCount = 0 def __init__(self, name, salary): self.name = name self.salary = salary Employee.empCount += 1 def displayCount(self): print(&quot;Total Employee %d&quot; % Employee.empCount) def displayEmployee(self): print(&quot;Name : &quot;, self.name, &quot;, Salary: &quot;, self.salary) empCount是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类中使用Employee.empCount访问。 第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，每次创建该类的一个实例时就会调用该方法。 方法中的变量self代表类的实例，self在定义类的方法时是必须有的，但是在调用时不必传入相应的参数。 self详解：self代表类的实例而非类。类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，按照惯例它的名称是self。 1234567class Test: def prt(self): print(self) print(self.__class__) t = Test()t.prt() 以上实例执行结果为： Text12&lt;__main__.Test object at 0x0000013CE6C87610&gt;&lt;class &#x27;__main__.Test&#x27;&gt; 从执行结果可以很明显的看出，self代表的是类的实例，代表当前对象的地址，而self.__class__则指向类。self不是Python的关键字，把它换成其他名称也是可以正常执行的。__main__.Test是类的全名。 1.2 类的实例对象 其他编程语言中一般用关键字new实例化一个对象，但是Python中并没有这个关键字，类的实例化类似函数调用方式。 以下使用类的名称Employee来实例化，并通过__init__方法接收参数。 1234&quot;&quot;&quot;创建 Employee 类的第一个对象&quot;&quot;&quot;emp1 = Employee(&quot;Zara&quot;, 2000)&quot;&quot;&quot;创建 Employee 类的第二个对象&quot;&quot;&quot;emp2 = Employee(&quot;Manni&quot;, 5000) 1.2.1 访问类的属性 使用点号\".\"来访问对象的属性（变量或方法）： 123emp1.displayEmployee()emp2.displayEmployee()print(&quot;Total Employee %d&quot; % Employee.empCount) 完整实例： 12345678910111213141516171819202122class Employee: &#x27;所有员工的基类&#x27; empCount = 0 def __init__(self, name, salary): self.name = name self.salary = salary Employee.empCount += 1 def displayCount(self): print(&quot;Total Employee %d&quot; % Employee.empCount) def displayEmployee(self): print(&quot;Name : &quot;, self.name, &quot;, Salary: &quot;, self.salary) &quot;创建 Employee 类的第一个对象&quot;emp1 = Employee(&quot;Zara&quot;, 2000)&quot;创建 Employee 类的第二个对象&quot;emp2 = Employee(&quot;Manni&quot;, 5000)emp1.displayEmployee()emp2.displayEmployee()print(&quot;Total Employee %d&quot; % Employee.empCount) 执行以上代码输出结果如下： Text123Name : Zara , Salary: 2000Name : Manni , Salary: 5000Total Employee 2 添加，删除，修改类的属性，如下所示： 123emp1.age = 7 # 添加一个 &#x27;age&#x27; 属性emp1.age = 8 # 修改 &#x27;age&#x27; 属性del emp1.age # 删除 &#x27;age&#x27; 属性 Python有个非常有趣的特性，即支持给已创建的对象增加属性！这在Java中是做不到的，C++大概也不能。 从面向对象的角度来说，不推荐直接用\".\"来访问属性，推荐使用set()和get()方法来进行属性值的设定和获取，这两类方法称为setter、getter方法。Python提供了以下函数来访问属性： getattr(obj, name[, default])：访问对象的属性； hasattr(obj,name)：检查是否存在一个属性； setattr(obj,name,value)：设置一个属性。如果属性不存在，会创建一个新属性； delattr(obj, name)：删除属性。 1234getattr(emp1, &#x27;age&#x27;) # 返回 &#x27;age&#x27; 属性的值hasattr(emp1, &#x27;age&#x27;) # 如果存在 &#x27;age&#x27; 属性返回 True。setattr(emp1, &#x27;age&#x27;, 8) # 添加属性 &#x27;age&#x27; 值为 8delattr(emp1, &#x27;age&#x27;) # 删除属性 &#x27;age&#x27; 1.2.2 Python内置类属性 __dict__：类的属性，是一个由类的数据属性组成的字典； __doc__：类的文档字符串； __name__：类名； __module__：类定义所在的模块，类的全名是__main__.className，如果类位于一个导入模块mymod中，那么className.__module__等于mymod； __bases__：类的所有父类，是一个由所有父类组成的元组。 Python内置类属性调用实例如下： 1234567891011121314151617181920class Employee: &#x27;所有员工的基类&#x27; empCount = 0 def __init__(self, name, salary): self.name = name self.salary = salary Employee.empCount += 1 def displayCount(self): print(&quot;Total Employee %d&quot; % Employee.empCount) def displayEmployee(self): print(&quot;Name : &quot;, self.name, &quot;, Salary: &quot;, self.salary) print(&quot;Employee.__doc__:&quot;, Employee.__doc__)print(&quot;Employee.__name__:&quot;, Employee.__name__)print(&quot;Employee.__module__:&quot;, Employee.__module__)print(&quot;Employee.__bases__:&quot;, Employee.__bases__)print(&quot;Employee.__dict__:&quot;, Employee.__dict__) 执行以上代码输出结果如下： Text12345Employee.__doc__: 所有员工的基类Employee.__name__: EmployeeEmployee.__module__: __main__Employee.__bases__: (&lt;class &#x27;object&#x27;&gt;,)Employee.__dict__: &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: &#x27;所有员工的基类&#x27;, &#x27;empCount&#x27;: 0, &#x27;__init__&#x27;: &lt;function Employee.__init__ at 0x00000250D7A3C1F0&gt;, &#x27;displayCount&#x27;: &lt;function Employee.displayCount at 0x00000250D7A3C160&gt;, &#x27;displayEmployee&#x27;: &lt;function Employee.displayEmployee at 0x00000250D7A3C280&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Employee&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Employee&#x27; objects&gt;&#125; 1.2.3 Python对象销毁（垃圾回收） Python使用了引用计数这一简单技术来跟踪和回收垃圾。 在Python内部用内部跟踪变量记录着所有使用中的对象各有多少引用，称为引用计数器。 对象被创建时就创建了一个引用计数。当不再需要某对象，即该对象的引用计数变为0时它被垃圾回收。但是回收不是“立即”的，由解释器在适当的时机将垃圾对象占用的内存空间回收。 1234567a = 40 # 创建对象 &lt;40&gt;b = a # 增加引用， &lt;40&gt; 的计数c = [b] # 增加引用. &lt;40&gt; 的计数del a # 减少引用 &lt;40&gt; 的计数b = 100 # 减少引用 &lt;40&gt; 的计数c[0] = -1 # 减少引用 &lt;40&gt; 的计数 垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下仅使用引用计数是不够的。Python的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充，垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。在这种情况下解释器会暂停下来，试图清理所有未被引用的循环。 为了研究垃圾回收机制，使用析构函数__del__。__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行： 123456789101112131415class Point: def __init__( self, x=0, y=0): self.x = x self.y = y def __del__(self): class_name = self.__class__.__name__ print(class_name, &quot;销毁&quot;) pt1 = Point()pt2 = pt1pt3 = pt1print(id(pt1), id(pt2), id(pt3)) # 打印对象的iddel pt1del pt2del pt3 以上实例运行结果如下： Text122012588891008 2012588891008 2012588891008Point 销毁 注意：通常需要在单独的文件中定义一个类， 1.3 类的继承 面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。 通过继承创建的新类称为子类或派生类，被继承的类称为基类、父类或超类。 继承语法： 12class 派生类名(基类名) ... 在Python中继承的一些特点： 如果在子类中需要父类的构造方法就需要显式的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看： python 子类继承父类构造函数说明。 在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别在于类中调用普通函数时并不需要带上self参数 Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。即先在本类中查找调用的方法，找不到才去基类中找。 如果在继承元组中列了一个以上的类，那么它就被称作\"多重继承\" ，继承的积累在括号中列出： Text12class SubClassName(ParentClass1, ParentClass2, ...):...... 派生类的实例： 1234567891011121314151617181920212223242526class Parent: # 定义父类 parentAttr = 100 def __init__(self): print(&quot;调用父类构造函数&quot;) def parentMethod(self): print(&#x27;调用父类方法&#x27;) def setAttr(self, attr): Parent.parentAttr = attr def getAttr(self): print(&quot;父类属性 :&quot;, Parent.parentAttr) class Child(Parent): # 定义子类 def __init__(self): print(&quot;调用子类构造方法&quot;) def childMethod(self): print(&#x27;调用子类方法&#x27;) c = Child() # 实例化子类c.childMethod() # 调用子类的方法c.parentMethod() # 调用父类方法c.setAttr(200) # 再次调用父类的方法 - 设置属性值c.getAttr() # 再次调用父类的方法 - 获取属性值 以上代码执行结果如下： Text1234调用子类构造方法调用子类方法调用父类方法父类属性 : 200 继承多个类的案例： 123456class A: # 定义类 A.....class B: # 定义类 B.....class C(A, B): # 继承类 A 和 B..... 判断某个类是不是子类可以使用issubclass()或者isinstance()方法： issubclass(Class1, Class2)：布尔函数，Class1是Class2的子类或者子孙类则返回true。 isinstance(obj, Class)：布尔函数，如果obj是Class类的实例对象或者是Class子类的一个实例对象则返回true。 2 类方法的重写 如果你的父类方法的功能不能满足你的需求，你可以在子类重写（又叫重载）你父类的方法： 12345678910class Parent: # 定义父类 def myMethod(self): print &#x27;调用父类方法&#x27; class Child(Parent): # 定义子类 def myMethod(self): print &#x27;调用子类方法&#x27; c = Child() # 子类实例c.myMethod() # 子类调用重写方法 执行以上代码输出结果如下： Text1调用子类方法 2.1 基础重载方法 序号 方法, 描述 &amp; 简单的调用 1 __init__(self, args...)：构造函数。简单的调用方法：obj = className(args) 2 __del__(self)：析构方法, 删除一个对象。简单的调用方法：del obj 3 __repr__(self)：转化为供解释器读取的形式。简单的调用方法：repr(obj) 4 __str__(self)：用于将值转化为适于人阅读的形式。简单的调用方法：str(obj) 5 __cmp__ ( self, x )：对象比较。简单的调用方法：cmp(obj, x) 2.2 运算符重载 Python同样支持运算符重载： 1234567891011121314151617class Vector: def __init__(self, a, b): self.a = a self.b = b def __str__(self): # __str__在print被调用，目的是输出类的内容 return &#x27;Vector (%d, %d)&#x27; % (self.a, self.b) def __add__(self, other): return Vector(self.a + other.a, self.b + other.b)v1 = Vector(2, 10)v2 = Vector(5, -2)print(v1)print(v1 + v2)print(v1.__str__()) 以上代码执行结果如下所示: Text123Vector (2, 10)Vector (7, 8)Vector (2, 10) 3 类的属性与方法 3.1 类的私有属性 __private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时写作self.__private_attrs。 3.2 类的方法 在类的内部，使用def关键字可以为类定义一个方法。与一般函数定义不同，类方法必须包含参数self作为第一个参数。 3.3 类的私有方法 __private_method：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用时写作self.__private_methods。 私有属性的实例（私有方法类似）： 1234567891011121314class JustCounter: __secretCount = 0 # 私有变量 publicCount = 0 # 公开变量 def count(self): self.__secretCount += 1 self.publicCount += 1 print(self.__secretCount) counter = JustCounter()counter.count()counter.count()print(counter.publicCount)print(counter.__secretCount) # 报错，实例不能访问私有变量 Python 通过改变名称来包含类名: Text1234567122Traceback (most recent call last): File &quot;C:\\Users\\jh108\\PycharmProjects\\PythonLearningCodes\\OOP.py&quot;, line 21, in &lt;module&gt; print(counter.__secretCount) # 报错，实例不能访问私有变量AttributeError: &#x27;JustCounter&#x27; object has no attribute &#x27;__secretCount&#x27; Python不允许实例化的类访问私有数据，但你可以使用object._className__attrName（对象名._类名__私有属性名）访问属性，参考以下实例： 123456class Runoob: __site = &quot;www.runoob.com&quot;runoob = Runoob()print(runoob._Runoob__site) 执行以上代码，执行结果如下： Text1www.runoob.com 3.4 单下划线、双下划线、头尾双下划线说明 __foo__: 两边都有双下划线的是特殊方法，一般是系统定义名字，类似__init__()之类的。 _foo: 以单下划线开头的是protected类型的变量，即保护类型。只能允许其本身与子类进行访问，不能用于from module import *。 __foo: 双下划线的表示的是私有类型(private)的变量，只能允许这个类本身进行访问。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"Python","permalink":"https://shymuel.top/tags/Python/"}]},{"title":"【日文歌词】《うっせぇわ》歌词（中日语+假名对照版）","slug":"【日文歌词】《うっせぇわ》歌词（中日语+假名对照版）","date":"2022-01-10T07:32:17.000Z","updated":"2022-07-22T17:14:36.140Z","comments":true,"path":"899839865.html","link":"","permalink":"https://shymuel.top/899839865.html","excerpt":"","text":"本歌日语歌词和中文翻译来源于网易云音乐，假名为博主听译，仅供个人学习与交流之用。 ただしさとは、おろかさとは 正 しさとは、愚 かさとは 什么叫正确？什么叫愚蠢？ それがなにかみせつけてやる それが何 か見せつけてやる 现在就让你们见识一下吧！ ちっちゃなころからゆうとうせい ちっちゃな頃 から優 等 生 从小便是优等生 きづいたらおとなになっていた 気づいたら大 人になっていた 回过神来便已成为了大人 ナイフのようなしこうかいろ ナイフの様 な思考 回 路 充满了刀锋般的思考方式 もちあわせるわけもなく 持ち合わせる訳 もなく 但也没必要和你一起比较吧 でもあそびたりない、なにかたりない でも遊 び足りない、何 か足りない 但是玩不够啊，还不够快乐啊 こまっちまうこれはだれかのせい 困 っちまうこれは誰 かのせい 左右为难又是谁的错啊 あてもなくただこんらんするエイデイ あてもなくただ混 乱 するエイデイ 也不过只是没有目的的日程渐渐变得混乱 それもそっか 那也是当然嘛 さいしんのりゅうこうはとうぜのはあく 最 新 の流 行 は当 然 の把握 最流行的东西，第一时间掌握 きゅうざいのどうこうはつうきんじチェック 経 済 の動 向 は通 勤 時チェック 经济的流向上班前查看 じゅんじょうなせいしんでにゅうしゃしワーク 純 情 な精 神 で入 社 しワーク 抱有热情的进公司工作 しゃかいじんじゃとうぜんのルールです 社 会 人 じゃ当 然 のルールです 这可是社会人的规则啊 はぁ？うっせぇうっせぇうっせぇわ 哈？啰嗦！烦人！吵死了！ あなたがおもうよりけんこうです あなたが思 うより健 康 です 我可比你想的要健康得多 いっさいがっさいぼんような 一 切 合 切 凡 庸 な 一切一切都平凡的你 あなたじゃわからないかもね あなたじゃ分からないかもね 你可能不明白吧 ああよくにあう 嗚呼よく似合う 啊，和你可真是般配啊 そのかもなくふかもないメロディー その可もなく不可もないメロディー 这没有存在必要的旋律 うっせぇうっせぇうっせぇわ 啰嗦！烦人！吵死了！ あたまのできがちがうのでもんだいはナシ 頭 の出来が違 うので問 題 はナシ 我们头脑构造不一样，所以没什么问题！ つってもわたしもはんにんげん つっても私 模範 人 間 就算这样我也可是人之模范啊 なぐったりするのはノーセンキュー 殴 ったりするのはノーセンキュー 教训你一顿这种事也是不用谢我 だったらことばのじゅうこうを だったら言 葉の銃 口 を 既然这样就将枪口（话语） そのあたまにつきつけてうてば その頭 に突きつけて撃てば 对准脑门一通扫射吧！ マジヤバない？とまれやしない マジヤバない？止まれやしない 这样下去很糟糕吧？不试试放弃吗？ ふへいふまんだれてなれのはて 不平 不満 誰 て成れの果て 怨天尤人可不会有好下场的 サディスティックにへんぼうするせいしん サディスティックに変 貌 する精 神 变得施虐者一般的思想 クソだりぃな 真是渣滓 さけがあいたグラスあればすぐにつぎなさい 酒 が空いたグラスあれば直ぐに注ぎなさい 酒杯空了就立马装满 みんながつまみやすいようにくしがいしなさい 皆 がつまみ易い ように串 外 しなさい 为了大家吃东西更方便给我把菜从串上取下来 かいけいやちゅうもんはせんじんをきる 会 計 や注 文 は先 陣 を切る 结账和点菜搞快点 ふぶんりつさいていげんのマナーです 不文 律 最 低 限 のマナーです 这是最低限度的不成文规定吧 はぁ？うっせぇうっせぇうっせぇわ 哈？啰嗦！烦人！吵死了！ くせぇくちふさげやげんかいです くせぇ口 塞 げや限 界 です 也该闭上你这张臭嘴了吧我受够了 ぜったいぜったいげんだいのだいべんしゃはわたしやろがい 絶 対 絶 対 現 代 の代 弁 者 は私 やろがい 现代人的榜样绝对就是我了吧 もうみあきたわ もう見飽きたわ 已经见多了啊 にばんせんじいいかえのパロディ 二番 煎 じ言い換えのパロディ 换汤不换药只是换了个说法的模仿 うっせぇうっせぇうっせぇわ 啰嗦！吵死了！烦死了 まるまるとにくついたそのがんめんにバツ 丸 々 と肉 付いたその顔 面 にバツ 恨不得赏你这肥猪一拳 うっせぇうっせぇうっせぇわ 啰嗦！烦人！吵死了！ うっせぇうっせぇうっせぇわ 啰嗦！烦人！吵死了！ わたしがぞくにいうてんさいです 私 が俗 に言う天 才 です 我可是你们所说的天才！ うっせぇうっせぇうっせぇわ 啰嗦！烦人！吵死了！ あなたがおもうよりけんこうです あなたが思 うより健 康 です 我可比你想的要健康得多！ いっさいがっさいぼんような 一 切 合 切 凡 庸 な 一切一切都平凡的你 あなたじゃわからないかもね あなたじゃ分からないかもね 可能不明白吧 ああつまらねぇ 嗚呼つまらねぇ 啊，真无趣啊 なんかいきかせるんだそのメモリー 何 回 聞かせるんだそのメモリー 这样的回忆已经听了多少遍啊 うっせぇうっせぇうっせぇわ 啰嗦！烦人！吵死了！ アタシもたいがい だけど アタシも大 概 だけど 我或许也差不多... どうだっていいぜもんだいはナシ どうだっていいぜ問 題 はナシ 不！怎么都好，我没有问题！","categories":[{"name":"日语学习","slug":"日语学习","permalink":"https://shymuel.top/categories/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://shymuel.top/tags/%E6%97%A5%E8%AF%AD/"},{"name":"日文歌","slug":"日文歌","permalink":"https://shymuel.top/tags/%E6%97%A5%E6%96%87%E6%AD%8C/"}]},{"title":"【Latax】语法记录","slug":"【Latax】语法记录","date":"2021-12-15T02:30:35.000Z","updated":"2022-07-22T17:23:10.553Z","comments":true,"path":"2021361885.html","link":"","permalink":"https://shymuel.top/2021361885.html","excerpt":"","text":"Overleaf的LaTex教程 包含基本上所有Latex小语法的网站 在线Latex公式编辑器（界面比第二个网站更好看） 给字母加奇怪的东西 \\pmb{}，字母加粗 Text1\\pmb&#123;x&#125;, \\ \\pmb&#123;X&#125; \\(\\pmb{x}, \\ \\pmb{X}\\) \\hat{}，头顶加小尖角 Text1\\hat&#123;\\gamma&#125;_&#123;j k&#125;=\\frac&#123;\\alpha_&#123;k&#125; \\phi\\left(y_&#123;j&#125; \\mid \\theta_&#123;k&#125;\\right)&#125;&#123;\\sum_&#123;k=1&#125;^&#123;R&#125; \\alpha_&#123;k&#125; \\phi\\left(y_&#123;j&#125; \\mid \\theta_&#123;k&#125;\\right)&#125; \\(\\hat{\\gamma}_{j k}=\\frac{\\alpha_{k} \\phi\\left(y_{j} \\mid \\theta_{k}\\right)}{\\sum_{k=1}^{R} \\alpha_{k} \\phi\\left(y_{j} \\mid \\theta_{k}\\right)}\\) 各种括号和方框 \\begin{cases}，多种情况的表示 Text1\\gamma_&#123;j k&#125;= \\begin&#123;cases&#125;1, &amp; \\text &#123; 第 &#125; j \\text &#123; 个观测来自第 &#125; k \\text &#123; 个分模型 &#125; \\\\ 0, &amp; \\text &#123; 否则 &#125;\\end&#123;cases&#125; \\(\\gamma_{j k}= \\begin{cases}1, &amp; \\text { 第 } j \\text { 个观测来自第 } k \\text { 个分模型 } \\\\ 0, &amp; \\text { 否则 }\\end{cases}\\) \\begin{array}，方程组 Text1\\left\\&#123;\\begin&#123;array&#125;&#123;l&#125;\\mathrm&#123;e&#125;^&#123;-x_&#123;1&#125;&#125;+\\mathrm&#123;e&#125;^&#123;-2 x_&#123;2&#125;&#125;+x_&#123;3&#125;-2 x_&#123;4&#125;+t_&#123;k&#125; x_&#123;5&#125;-5.3=0 \\\\ \\mathrm&#123;e&#125;^&#123;-2 x_&#123;1&#125;&#125;+\\mathrm&#123;e&#125;^&#123;-x_&#123;2&#125;&#125;-2 x_&#123;3&#125;+t_&#123;k&#125; x_&#123;4&#125;-x_&#123;5&#125;+25.6=0 \\\\ t_&#123;k&#125; x_&#123;1&#125;+3 x_&#123;2&#125;+\\mathrm&#123;e&#125;^&#123;-x_&#123;3&#125;&#125;-3 x_&#123;5&#125;+37.8=0 \\\\ 2 x_&#123;1&#125;+t_&#123;k&#125; x_&#123;2&#125;+x_&#123;3&#125;-\\mathrm&#123;e&#125;^&#123;-x_&#123;4&#125;&#125;+2 \\mathrm&#123;e&#125;^&#123;-2 x_&#123;5&#125;&#125;-31.3=0 \\\\ x_&#123;1&#125;-2 x_&#123;2&#125;-3 t_&#123;k&#125; x_&#123;3&#125;+\\mathrm&#123;e&#125;^&#123;-2 x_&#123;4&#125;&#125;+3 \\mathrm&#123;e&#125;^&#123;-x_&#123;5&#125;&#125;+42.1=0\\end&#123;array&#125;\\right. \\(\\left\\{\\begin{array}{l}\\mathrm{e}^{-x_{1}}+\\mathrm{e}^{-2 x_{2}}+x_{3}-2 x_{4}+t_{k} x_{5}-5.3=0 \\\\ \\mathrm{e}^{-2 x_{1}}+\\mathrm{e}^{-x_{2}}-2 x_{3}+t_{k} x_{4}-x_{5}+25.6=0 \\\\ t_{k} x_{1}+3 x_{2}+\\mathrm{e}^{-x_{3}}-3 x_{5}+37.8=0 \\\\ 2 x_{1}+t_{k} x_{2}+x_{3}-\\mathrm{e}^{-x_{4}}+2 \\mathrm{e}^{-2 x_{5}}-31.3=0 \\\\ x_{1}-2 x_{2}-3 t_{k} x_{3}+\\mathrm{e}^{-2 x_{4}}+3 \\mathrm{e}^{-x_{5}}+42.1=0\\end{array}\\right.\\) 既可以用来表示矩阵，也可以用来表示方程…… 数学表达式 根式 Text1\\sqrt[]&#123;&#125; \\(\\sqrt[n]{x+1}\\) 集合相关 Text12345$\\exists$$\\forall$$\\neg$$\\wedge$$\\vee$ \\(\\exists,\\ \\forall, \\ \\neg, \\ \\wedge,\\ \\vee\\) LaTex中的数学字体 有些字体需要在序言中引入特定的包：\\usepackage&#123;amssymb&#125; 有些字体支持一部分字符： Text123456\\begin&#123;align*&#125;RQSZ \\\\\\mathcal&#123;RQSZ&#125; \\\\\\mathfrak&#123;RQSZ&#125; \\\\\\mathbb&#123;RQSZ&#125;\\end&#123;align*&#125; \\(\\begin{align*} RQSZ \\\\ \\mathcal{RQSZ} \\\\ \\mathfrak{RQSZ} \\\\ \\mathbb{RQSZ} \\end{align*}\\) 手写体，哥特黑体，黑板粗体。 也可以将整个数学表达式的字体更换为另外一种： Text12345678\\begin&#123;align*&#125;3x^2 \\in R \\subset Q \\\\\\mathrm&#123;3x^2 \\in R \\subset Q&#125; \\\\\\mathit&#123;3x^2 \\in R \\subset Q&#125; \\\\\\mathbf&#123;3x^2 \\in R \\subset Q&#125; \\\\\\mathsf&#123;3x^2 \\in R \\subset Q&#125; \\\\\\mathtt&#123;3x^2 \\in R \\subset Q&#125; \\end&#123;align*&#125; \\(\\begin{align*}3x^2 \\in R \\subset Q \\\\ \\mathrm{3x^2 \\in R \\subset Q} \\\\ \\mathit{3x^2 \\in R \\subset Q} \\\\ \\mathbf{3x^2 \\in R \\subset Q} \\\\ \\mathsf{3x^2 \\in R \\subset Q} \\\\ \\mathtt{3x^2 \\in R \\subset Q} \\end{align*}\\) \\mathnormal&#123;3x^2 \\in R \\subset Q&#125;理论上这也是一种字体，和默认字体一样的，但是hexo的渲染器会报错，就没有放上去了。","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"文档编辑","slug":"文档编辑","permalink":"https://shymuel.top/tags/%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91/"}]},{"title":"【安利】好用软件及网站分享","slug":"【安利】好用软件及网站分享","date":"2021-12-15T02:26:20.000Z","updated":"2022-08-21T02:52:03.190Z","comments":true,"path":"2675119176.html","link":"","permalink":"https://shymuel.top/2675119176.html","excerpt":"","text":"1 优秀软件 1.1 文档编辑 WPS，一直开会员，云文档功能yyds。 1.2 笔记软件 为知笔记。旧版和X版我都在用，笑死，已经变成为知笔记的形状了，一年60块买不了吃亏买不了上当。我现在写博客都是在为知笔记写完然后导出成Markdown。 1.3 论文阅读和管理 单纯看PDF的话WPS也能满足需求，但WPS是不提供文献管理功能的，批注功能也弱了点。今天发现一个叫IvySci的软件，中文名青藤学术，竟然还是个国产软件……well，再用一段时间再来评价，目前用免费版，收费版也不贵，但收费之后的空间确实小了点，看得出小公司没那么有钱……目前最吸引我的功能是软件内用各种引擎查论文，以及一键把论文中的引用文献加入项目。改版之后翻译功能强大了太多了，强烈推荐！！！ 论文管理也推荐EndNote，除了能方便的在word中插入文献，还可以为导入后的文献在SCI中搜索并下载论文本体，可以说非常方便了。 1.4 对文献进行引文分析 HistCist Pro。具体用法可以参考我《文献管理与信息分析》那篇博客。 2 优秀网站 2.1 论文搜索 之前一直用学校的网在SCI上查，最近觉得还是谷歌学术牛牛。但是懒得开科学上网的话，谷粉学术挺好用的，也可以去用镜像。 sci-hub当然也是非常好的选择。 2.2 电子书 Z-图书馆。免费下载大量电子书，配合Koodo简直无敌！！！ 2.3 论坛 分享资源的论坛： 电力电子技术与新能源。找《华为C++技术规范》的时候发现了这个论坛，C++和电力电子技术或许有些不搭，但这个网站上还有《华为-模拟电路讲义》，这么一来违和感就少了很多……？ 2.4 科研网站 Arxiv。已知论文编号，可以输入：https://arxiv.org/pdf/number.pdf。例如：https://arxiv.org/pdf/1702.04595.pdf。","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"安利","slug":"安利","permalink":"https://shymuel.top/tags/%E5%AE%89%E5%88%A9/"},{"name":"优秀网站","slug":"优秀网站","permalink":"https://shymuel.top/tags/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99/"}]},{"title":"【强化学习入门】1 强化学习概述","slug":"【强化学习入门】1 强化学习概述","date":"2021-09-03T13:37:20.000Z","updated":"2022-08-21T02:53:15.652Z","comments":true,"path":"4072327491.html","link":"","permalink":"https://shymuel.top/4072327491.html","excerpt":"","text":"本系列文章为笔者学习网络上的强化学习教程之后的笔记，在原文和自己理解的基础上重新写作而成，基本可以认为是原文的精简版，后续可能会在阅读其他教材之后在对应章节添加例子等。原教程地址 1.1 强化学习 强化学习解决的是一个智能体如何在一个复杂不确定的环境里极大化它能获得的奖励。 在环境 (environment) 中，智能体 (agent) 进行各种动作( action) 产生某种状态 (state)，据此环境给出奖励 (reward)。这里的奖励是延迟奖励，即行为的进行到奖励的求得之间往往又隔了一些动作。 强化学习的一些特征：有试错探索 (trial-and-error exploration)，探索环境来获取对环境的理解；从环境中得到延迟的奖励；每个动作在时间上是连续的；agent 的行为会影响之后的数据。 举一个雅达利 pong 游戏的例子：一块板子往上或者往下，把弹球弹到对面。整个游戏过程是预演 (rollout) 的，即从当前帧可以生成很多局游戏。agent 和环境交互会产生很多观测，每个观测是一个轨迹 (trajectory)。轨迹是当前帧以及他采取的策略，即状态和动作的一个序列：\\(\\tau =(s_0,a_0,s_1,a_1, \\dots)\\)。 一场游戏叫做一个回合 (episode) 或者试验 (trial)。 最近把强化学习和深度学习结合起来，成为深度强化学习。 1.2 序列决策过程 序列决策 (sequential decision making) 过程可以说是一般的单智能体 RL 的通用过程。 奖励是由环境给的一个标量的反馈信号 (scalar feedback signal)，这个信号显示了智能体在某一步采取某个策略的表现如何。强化学习训练的目的就是为了最大化智能体可以获得的奖励，智能体行动的目的就是为了极大化它的期望的累积奖励 (expected cumulative reward)。同时要进行近期奖励和远期奖励的一个平衡，最终一般希望获得更多的长期奖励。 历史是观测、行为、奖励的序列： \\(H_t =\\{O_1, R_1, A_1,\\dots, A_{t-1},\\dots\\}\\) agent 在采取动作的时候依赖于它的历史，可以把整个游戏的状态看成这个历史的函数：\\(S_t=f(H_t)\\)。 状态\\(S\\)是对世界的完整描述，deep RL 中一般用实值的向量、矩阵或张量来表示状态和观测。 agent 的状态和环境的状态等价说明环境完全可观测。这种问题称为 MDP 问题。在这个问题中，\\(O_t=S^e_t=S^a_t\\)。 否则就是部分可观测的。称为 POMDP，即部分可观测马尔科夫决策过程。POMDP 是一个马尔科夫决策过程的泛化，具有马尔科夫性质，但假设智能体无法感知环境的状态\\(S\\)，只知道部分观测值\\(O\\)。 用一个七元组描述马尔科夫过程：\\((S, A, T, R, Ω, O, γ)\\)。\\(S\\)是状态空间，隐变量；\\(A\\)是动作空间，\\(T\\)是状态转移概率，\\(R\\)是奖励函数；\\(Ω\\)是观测概率，\\(O\\)为观测空间，\\(\\gamma\\)为折扣系数。 1.3 动作空间 不同环境中可以进行的动作是不同的。在给定环境中，有效动作的集合被称为动作空间。离散动作空间中动作数量有限；连续动作空间中动作种类无限，此时动作是实值的向量。 1.4 强化学习智能体的组成和类型 策略函数 (policy function)：用这个函数来选取下一步的动作； 价值函数 (value function)：对当前状态估价； 模型 (model)：表示 agent 对这个环境的状态进行的理解，这一点决定训练如何进行。 1.4.1 策略 策略一般有两种：随机性策略 (stochastic policy) 和确定性策略 (deterministic policy)。 随机性策略中，每个行为的发生是有概率的，要进行采样然后再动作，也就是说概率再小的动作也可能被执行。而确定性策略则只采用最有可能的概率，即\\(a^*=\\arg \\max_a \\pi(a\\mid s)\\)。随机性策略：输入一个状态s，输出是一个概率。进一步对概率进行采样，可以得到一个action。 对于 Atari 游戏，策略函数的输入就是游戏的一帧，他的输出决定往左或者往右。通常采用随机性策略，因为其动作具有多样性。 1.4.2 价值函数 价值函数是对未来奖励的一个预测，用来评估状态的好坏。 价值函数里有一个折扣因子 (discount factor)。我们希望在尽可能短的时间里得到尽可能多的奖励。价值函数的定义其实是一个期望： \\(v_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}\\left[G_{t} \\mid S_{t}=s\\right]=\\mathbb{E}_{\\pi}\\left[\\sum_{k=0}^{\\infty} \\gamma^{k} R_{t+k+1} \\mid S_{t}=s\\right],\\ \\text{for all}\\ s \\in \\mathcal{S}\\) 上面的公式表明已知某一个策略函数的时候，到底可以得到多少奖励。 还有一种价值函数叫 Q 函数，包含两个变量状态和动作： \\(q_{\\pi}(s, a) \\doteq \\mathbb{E}_{\\pi}\\left[G_{t} \\mid S_{t}=s, A_{t}=a\\right]=\\mathbb{E}_{\\pi}\\left[\\sum_{k=0}^{\\infty} \\gamma^{k} R_{t+k+1} \\mid S_{t}=s, A_{t}=a\\right]\\) Q 函数表明，奖励的期望取决于当前的状态和智能体的行为。 这两种价值函数在之后都会有详细解释和应用。 1.4.3 模型 模型决定了下一个状态会是什么样的。它由两个部分组成： 概率，指状态之间如何转移；奖励函数，指在当前状态进行了某个行为后可以得到多大的奖励。 有了上述三个部分之后就得到了一个马尔科夫决策过程。 1.4.4 强化学习智能体的类型 1.4.4.1 基于价值的智能体与基于策略的智能体 基于价值的智能体 (value-based agent)：显式学习价值函数，隐式学习策略。 基于策略的智能体 (policy-based agent)：直接学习策略，没有学习价值函数。 二者结合得到演员-评论员智能体 (actor-critic agent)，策略函数和价值函数都学习，然后通过两者交互得到一个最佳行为。 基于策略迭代和基于价值迭代的强化学习方法有什么区别？ 对一个状态转移概率已知的马尔科夫决策过程，可以用动态规划算法求解。决策方式来看，可以分为基于策略迭代的方法和基于价值迭代的方法。决策方式是静态的，不随状态变化而变化。 基于策略迭代的强化学习中，智能体会制定一套动作策略以确定给定状态下采取何种动作，并根据这个策略操作。有策略梯度算法等。基于价值迭代的方法则维护一个价值表格或函数。只能应用在不连续、离散的环境下。基于价值迭代的有 Q-learning，Sarsa等。演员-评论员算法同时使用策略和价值评估来做出决策，智能体根据策略做出动作，而价值函数会对做出的动作给出价值，这样可以在原有的策略梯度算法的基础上加速学习过程，取得更好的效果。 1.4.4.2 有模型强化学习智能体与免模型强化学习智能体 针对是否需要对真实环境建模，强化学习可以分为有模型学习和免模型学习。有模型学习是指根据环境中的经验，构建一个虚拟世界，同时在真实环境和虚拟世界中学习；免模型学习是指不对环境进行建模，直接与真实环境进行交互来学习到最优策略。 有模型 (model-based) 强化学习智能体通过学习状态的转移来采取动作。免模型 (model-free) 强化学习智能体没有直接估计这个状态的转移，也没有得到环境的具体转移变量，通过学习价值函数和策略函数进行决策。免模型的模型里面没有一个环境转移的模型。 免模型学习通常属于数据驱动型方法，需要大量的采样来估计状态、动作及奖励函数，从而优化动作策略。 1.5 学习与规划 学习 (learning) 和规划 (planning) 是序列决策的两个基本问题。 简单来说，强化学习面对环境的未知部分要进行学习，对于环境的已知部分要进行规划。 1.6 探索和利用 探索是指怎么探索环境，即找到能获得最大奖励的策略。利用是指不尝试新的东西，仅靠已知的信息就可以得到很大奖励的行为。 与监督学习不同，强化学习任务的最终奖赏是在多步动作之后才能观察到，这里不妨先考虑比较简单的情形：最大化单步奖赏，即仅考虑一步操作。需注意的是，即便在这样的简化情形下，强化学习仍与监督学习有显著不同，因为机器需通过尝试来发现各个动作产生的结果，而没有训练数据告诉机器应当做哪个动作。 单步强化学习对应了 K-臂赌博机 (K-armed bandit) 的模型。赌徒投入一个硬币后可选择按下一个摇臂，每个摇臂以一定的概率吐出金币，但这个概率赌徒不知道。赌徒的目标是通过一定的策略最大化自己的奖赏。 若想获知每个摇臂的期望奖赏，则可采用仅探索法，将所有机会平均分配给每个摇臂，然后计算期望。 如果只想执行奖赏最大的动作，则可采用仅利用法，按下目前最优的摇臂。若有多个最优则随机选一个。 显然，在探索和利用之间，必须要达成一个较好的折中。 1.7 强化学习实验 cuhkrlcourse的RL代码； OpenAI 的 Gym 是一个很强的环境仿真库。离散控制场景（输出的动作是可数的，比如 Pong 游戏中输出的向上或向下动作）一般使用雅达利环境评估；连续控制场景（输出的动作是不可数的，比如机器人走路时不仅有方向，还要角度，角度就是不可数的，是一个连续的量）一般使用 mujoco 环境评估。Gym Retro 是对 Gym 环境的进一步扩展，包含了更多的一些游戏。 简书上的 Gym 环境总结。 Gym 的官方文档。 1.7.1 第一次使用 Gym text1pip install gym # 安装 Gym 12345678import gymenv = gym.make(&quot;Taxi-v3&quot;) # 出租车接乘客的游戏observation = env.reset()for step in range(100): action = env.action_space.sample() # 随机动作 observation, reward, done, info = env.step(action) print(observation) 1.7.2 CartPole 例子 CartPole 要求通过控制一个平板让木棍立起来。输入是向左或向右的一个力，\\(\\pm1\\)。失败条件是木棍角度过大或平板离轨道中心太远。 123456789import gym # 导入 Gym 的 Python 接口环境包env = gym.make(&#x27;CartPole-v0&#x27;) # 构建实验环境env.reset() # 重置一个 episodefor _ in range(1000): env.render() # 显示图形界面 action = env.action_space.sample() # 从动作空间中随机选取一个动作 env.step(action) # 用于提交动作，括号内是具体的动作env.close() # 关闭环境 执行这段代码时，机器人会无视该立起来的杆子，驾驶着小车朝某个方向一通跑，直到不见踪影，这是因为动作是随机选取的。打印 env.action_space.sample() 的返回值，会发现值是 0 或 1，一左一右。env.step() 一方面是执行动作，另一方面还有四个返回值，分别是 observation、reward、done、info。 observation 是状态信息，指游戏中观测到的屏幕像素值或者盘面状态描述信息。reward 是奖励值，即 action 提交以后能够获得的奖励值。这个奖励值因游戏的不同而不同，但总体原则是对完成游戏有帮助的动作会获得比较高的奖励值。done 表示游戏是否已经完成。如果完成了，就需要重置游戏并开始一个新的回合。info 是一些比较原始的用于诊断和调试的信息，或许对训练有帮助。不过 OpenAI 团队在评价用户提交的机器人时不允许使用这些信息。 玩游戏的时候可以输出一下 observation 观察游戏的状态是怎么定义的。env.step() 完成了一个完整的\\(S\\rightarrow A\\rightarrow R\\rightarrow S^′\\)过程。我们只要不断观测这样的过程，并让机器在其中用相应的算法完成训练，就能得到一个高质量的强化学习模型。 想要查看当前 Gym 库已经注册了哪些环境，可以使用以下代码： 1234from gym import envsenv_specs = envs.registry.all()envs_ids = [env_spec.id for env_spec in env_specs]print(envs_ids) 每个环境都定义了自己的观测空间和动作空间。环境 env 的观测空间用 env.observation_space 表示，动作空间用 env.action_space 表示。观测空间和动作空间既可以是离散空间，也可以是连续空间。在 Gym 库中，离散空间一般用 gym.spaces.Discrete 类表示，连续空间用 gym.spaces.Box 类表示。 1.7.3 MountainCar-v0 例子 小车上山例子。小车要跑到右边的山顶上碰到旗子，但小车的马力不够强。唯一的办法是让小车在两个坡上来回移动，借助从左边山上冲下来的速度冲上右边的山顶。 1.7.3.1 输出游戏的信息 1234567import gymenv = gym.make(&#x27;MountainCar-v0&#x27;)print(&#x27;观测空间 = &#123;&#125;&#x27;. format(env.observation_space))print(&#x27;动作空间 = &#123;&#125;&#x27;. format(env.action_space))print(&#x27;观测范围 = &#123;&#125; ~ &#123;&#125;&#x27;. format(env.observation_space.low,env.observation_space.high))print(&#x27;动作数 = &#123;&#125;&#x27;. format(env.action_space.n)) 由输出可知，观测空间是形状为 (2,) 的浮点型 np.array，动作空间是取 0,1,2 的 int 型数值。 1.7.3.2 实现一个智能体类 12345678910111213141516171819class BespokeAgent: def __init__(self, env): pass def decide(self, observation): # 决策 position, velocity = observation lb = min(-0.09 * (position + 0.25) ** 2 + 0.03, 0.3 * (position + 0.9) ** 4 - 0.008) ub = -0.07 * (position + 0.38) ** 2 + 0.07 if lb &lt; velocity &lt; ub: action = 2 else: action = 0 return action # 返回动作 def learn(self, *args): # 学习 passagent = BespokeAgent(env) 智能体的 decide() 方法实现了决策功能，而 learn() 方法实现了学习功能。BespokeAgent 类是一个比较简单的类，它只能根据给定的数学表达式进行决策，不能有效学习，只是用来演示。 1.7.3.3 智能体与环境交互 12345678910111213141516def play_montecarlo(env, agent, render=False, train=False): episode_reward = 0. # 记录回合总奖励，初始化为0 observation = env.reset() # 重置游戏环境，开始新回合 while True: # 不断循环，直到回合结束 if render: # 判断是否显示 env.render() # 显示图形界面，图形界面可以用 env.close() 语句关闭 action = agent.decide(observation) next_observation, reward, done, _ = env.step(action) # 执行动作 episode_reward += reward # 收集回合奖励 if train: # 判断是否训练智能体 agent.learn(observation, action, reward, done) # 学习 if done: # 回合结束，跳出循环 break observation = next_observation return episode_reward # 返回回合总奖励 play_montecarlo 函数可以让智能体和环境交互一个回合。这个函数有 4 个参数。env 是环境类，agent 是智能体类，render 是 bool 类型变量，指示在运行过程中是否要图形化显示。 如果函数参数 render 为 True，那么在交互过程中会调用 env.render() 以显示图形化界面，而这个界面可以通过调用 env.close() 关闭。train 是 bool 类型的变量，指示在运行过程中是否训练智能体。在训练过程中应当设置为 True 以调用 agent.learn() 函数；在测试过程中应当设置为 False，使得智能体不变。这个函数有一个返回值 episode_reward，是 float 类型的数值，表示智能体与环境交互一个回合的回合总奖励。 1.7.3.4 智能体与环境交互并显示 1234env.seed(0) # 设置随机数种子,只是为了让结果可以精确复现,一般情况下可删去episode_reward = play_montecarlo(env, agent, render=True)print(&#x27;回合奖励 = &#123;&#125;&#x27;. format(episode_reward))env.close() # 此语句可关闭图形界面 为了系统评估智能体的性能，下列代码求出了连续交互 100 回合的平均回合奖励。 1234import numpy as npepisode_rewards = [play_montecarlo(env, agent) for _ in range(100)]print(&#x27;平均回合奖励 = &#123;&#125;&#x27;. format(np.mean(episode_rewards))) 小车上山环境有一个参考的回合奖励值 -110，如果连续 100 个回合的平均回合奖励大于 -110，则认为这个任务被解决了。espokeAgent 类对应的策略的平均回合奖励大概就在 -105 左右。 测试智能体在 Gym 库中某个任务的性能时学术界一般最关心 100 个回合的平均回合奖励，选这个数字完全是习惯使然。对于有些环境会指定一个参考的回合奖励值，当连续 100 个回合的奖励大于指定的值时，就认为这个任务被解决了。但并不是所有的任务都指定了这样的值。 总结一下 Gym 的用法：使用 env=gym.make(环境名) 取出环境，使用 env.reset() 初始化环境，使用 env.step(动作) 执行一步环境，使用 env.render() 显示环境，使用 env.close() 关闭环境。 1.8 关键词 强化学习 (reinforcement learning, RL)：智能体与复杂且不确定的环境进行交互时，尝试使所获得的奖励最大化的计算算法。 动作 (action)：环境接收到的智能体当前状态的输出。 状态 (state)：智能体从环境中获取到的状态。 奖励 (reward)：智能体从环境中获取的反馈信号，这个信号代表智能体在某一步采取某个策略以后是否得到奖励以及奖励的大小。 探索 (exploration)：在当前的情况下，继续尝试新的动作。智能体有可能会得到更高的奖励，也有可能一无所获。 规划 (planning)：在当前的情况下，使用已知的可以获得最大奖励的动作。 深度强化学习 (deep reinforcement learning)：不需要手工设计特征，仅需要输入状态让系统直接输出动作的一个端到端 (end-to-end) 的强化学习方法。通常使用神经网络来拟合价值函数 (value function) 或者策略网络 (policy network)。 全部可观测 (full observability)、完全可观测 (fully observed) 和部分可观测 (partially observed)：当智能体的状态与环境的状态等价时，称环境是全部可观测的；当智能体能够观察到环境的所有状态时，称环境是完全可观测的。智能体不能观察到环境的所有状态时，称环境是部分可观测的。 部分可观测马尔可夫决策过程 (partially observable Markov decision process, POMDP)：即马尔可夫决策过程的泛化。部分可观测马尔可夫决策过程依然具有马尔可夫性质，但是其假设智能体无法感知环境的状态，只能知道部分观测值。 动作空间 (action space)、离散动作空间 (discrete action space)、连续动作空间 (continuous action space)：在给定的环境中，有效动作的集合被称为动作空间，智能体的动作数量是有限的动作空间为离散动作空间，反之，则被称为连续动作空间。 基于策略的 (policy-based)：智能体会制定一套动作策略，即确定在给定状态下需要采取何种动作，并根据这个策略进行操作。强化学习算法直接对策略进行优化，使制定的策略能够获得最大的奖励。 基于价值的 (valued-based)：智能体不需要制定显式的策略，它维护一个价值表格或者价值函数，并通过这个价值表格或价值函数来选取价值最大的动作。 有模型结构 (model-based)：智能体通过学习状态的转移来采取措施。 免模型结构 (model-free)：智能体没有直接估计状态的转移，也没有得到环境的具体转移变量。它通过学习价值函数 (value function) 或者策略网络 (policy network) 进行决策。","categories":[{"name":"强化学习","slug":"强化学习","permalink":"https://shymuel.top/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"强化学习","slug":"强化学习","permalink":"https://shymuel.top/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"人工智能","slug":"人工智能","permalink":"https://shymuel.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"【HEXO搭建个人网站】2 网站迁移到新电脑","slug":"【HEXO搭建个人网站】2 网站迁移到新电脑","date":"2021-08-29T08:32:00.000Z","updated":"2022-07-22T17:21:14.628Z","comments":true,"path":"200109796.html","link":"","permalink":"https://shymuel.top/200109796.html","excerpt":"","text":"将网站迁移到新电脑 安装nodejs和git for windows，npm中安装hexo：npm install -g hexo-cli。之后把博客文件夹从旧电脑复制过来即可。 为了上传，还要配置一下新电脑和github仓库之间的联系。这里还是放一个比较好的教程。","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://shymuel.top/tags/HEXO/"},{"name":"个人网站","slug":"个人网站","permalink":"https://shymuel.top/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}]},{"title":"【WPS】使用技巧","slug":"【WPS】使用技巧","date":"2021-08-14T10:43:49.000Z","updated":"2022-08-21T02:51:17.692Z","comments":true,"path":"3253309366.html","link":"","permalink":"https://shymuel.top/3253309366.html","excerpt":"","text":"1 公式中插入超过\\(3*3\\)的矩阵 ​ 恕我直言，WPS最新版这个公式属实邪门。用起来没有更方便，甚至都不能自己手动把界面下拉让用户能看到更多的选项…… ​ 今天遇到的问题是WPS自带的公式功能最大插入\\(3*3\\)矩阵，但我需要用到\\(1*7\\)的矩阵。方法是首先插入一个\\(1*3\\)​​的矩阵，然后选中整个矩阵（不包括括号），然后右键——插入——在此前插入列（或者在此后插入列），这样就可以突破原本的\\(3*3\\)的限制了……","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"文档编辑","slug":"文档编辑","permalink":"https://shymuel.top/tags/%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91/"}]},{"title":"【日文歌词】游戏王《Overlap》歌词（中日语+假名对照版）","slug":"【日文歌词】游戏王《Overlap》歌词（中日语+假名对照版）","date":"2021-08-03T07:52:32.000Z","updated":"2022-07-22T17:18:20.061Z","comments":true,"path":"abac2baf.html","link":"","permalink":"https://shymuel.top/abac2baf.html","excerpt":"","text":"本歌日语歌词和中文翻译来源于网易云音乐，假名为博主听译，仅供个人学习与交流之用。 かくせないほどまばゆいひかり せいじゃくやぶりこのよによみがえる 隠 せないほど眩 い光 静 寂 破 りこの世に甦 る 难以隐藏的炫目光芒 划破沉寂 在这世上苏醒 はげしいくゆらぐかわいただいち いのちをかけてひばなぶすけあう はげしいく揺らぐ渇 いた大 地 命 をかけて火花 ぶすけ合う 与剧烈震荡的干涸大地 不惜生命般摩擦出火花 もういちどだけでいい きせきおきてよ もう一 度だけでいい 奇跡 起きてよ 再一次就好 发生奇迹吧 かこになくしたきおくのページをとりもどすちからを 過去になくした記憶 のページを取り戻どすpower を 请给我能夺回过往失去的记忆书页的力量 やみをつらぬくしんじるこころたましいねむるばしょさがして 闇 を贯 ぬく信 じる心 魂 眠る 場所 探がして 坚信能冲破黑暗的心 寻找灵魂长眠之处 まばたきできない するどいがんこうをもやす 瞬 きできない 鋭 い眼 光 を燃やす 眼中燃起让人难以眨眼的锐利光芒 ひかりとかげのふたつのこころ くりすたるにうつるみらいへ 光 と影 の二 つの心 クリスタルに映 る未来 へ 光与暗的两颗心 一同前往水晶中映照的未来 いまうごきだす あかくみなぎるEYES 今 動き 出す 紅 く漲 るEYES 此刻开始行动 那涨红的双眼 たがいのきずをなめあうひびに おわりをつげて しずかにたちあがる 互 いの傷 を舐め合う日々に 终わりを告 て 静 かに立ち上がる 对互相舔舐伤口的时光 宣告终结 静静站起身来 ちいさなあかりともしたよるの きみとかわしたやくそくまもりぬく 小 さな明かり灯した 夜 の 君 と交 した約 束 守 り抜く 那微灯映照之夜 与你结下的约定 我会坚守到底 かすむしんきろうがきみをみせるよ 霞 む蜃 気楼 が君 を见せるよ 模糊的幻象之中 看见了你的身影 すすんださきになにがおきてもまけわしないかくごで 進 んだ先 に何 が掟 も負けわしない覚 悟で 无论前路上发生什么 我都会有绝不认输的觉悟 きせきはおこるしんじるこころ むかえにきたしょうりのめがみが 奇跡 は起こる信 じる心 迎 えに来た勝 利の女神 が 坚信能引发奇迹的心 胜利女神将迎接它的到来 すべてをたおすどんなかべにもひるまない 全 てを倒 すどんな壁 にも怯 まない 打倒一切敌人 不畏惧任何困难 まよいつづけるふたつのこころ いろあせることないせかいへ 迷 い続 ける二 つの心 色 褪せることない世界 へ 仍在迷惘的两颗心 一同前往永不黯淡的世界 いまかがやくよ かさなりあったEYES 今 輝 くよ 重 なりあったEYES 此刻绽放光芒 那重合的双眼 しずむたいようにつきがとけるよ 沈 む太 陽 に月 が溶けるよ 月亮融化在西沉的落日之中 かこになくしたきおくのページをとりもどすちからを 過去になくした記憶 のページを取り戻どすpower を 请给我能夺回过往失去的记忆书页的力量 やみをつらぬくしんじるこころたましいねむるばしょさがして 闇 を贯 ぬく信 じる心 魂 眠る 場所 探がして 坚信能冲破黑暗的心 寻找灵魂长眠之处 まばたきできない するどいがんこうをもやす 瞬 きできない 鋭 い眼 光 を燃やす 眼中燃起让人难以眨眼的锐利光芒 ひかりとかげのふたつのこころ くりすたるにうつるみらいへ 光 と影 の二 つの心 クリスタルに映 る未来 へ 光与暗的两颗心 一同前往水晶中映照的未来 いまうごきだす あかくみなぎるEYES 今 動き 出す 紅 く漲 るEYES 此刻开始行动 那涨红的双眼 かさなりあうEYES 重 なり合うEYES 那重合的双眼","categories":[{"name":"日语学习","slug":"日语学习","permalink":"https://shymuel.top/categories/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://shymuel.top/tags/%E6%97%A5%E8%AF%AD/"},{"name":"日文歌","slug":"日文歌","permalink":"https://shymuel.top/tags/%E6%97%A5%E6%96%87%E6%AD%8C/"}]},{"title":"【Java】基础知识点总结","slug":"【Java】基础知识点总结","date":"2021-07-11T07:19:34.000Z","updated":"2022-07-22T17:22:55.588Z","comments":true,"path":"79803d5e.html","link":"","permalink":"https://shymuel.top/79803d5e.html","excerpt":"","text":"本文内容均来源于网络，如尚硅谷的免费视频课程、菜鸟教程和优质博客等；本文仅供学习交流使用。 初识Java Java发行版有多个后缀名，通常Java SE 开发桌面级应用；Java EE 开发web应用；Java ME运行在移动端； Java的应用：企业级应用；Android平台开发；大数据平台开发；移动领域应用； Java的特点： 一：面向对象。类，对象；封装，继承，多态； 二：健壮性；三：跨平台性，通过JVM虚拟机实现； 两个核心机制：虚拟机和垃圾回收机制； JDK：Java开发工具包，其中包含了JRE。其中有编译工具javac.exe和打包工具jar.exe。 JRE：Java运行环境，包括虚拟机和Java程序所需核心类库等。想运行一个开发好的Java程序，只安装JRE即可。 JDK的目录：bin，基本程序；db，数据库；include，头文件；lib，jar包；src，常用的类库和源码； 程序员编写.java 源文件，用javac.exe编译为.class 字节码文件，再用Java.exe运行； 编译运行java源文件： 12javac helloworld.java (加后缀)java helloworld （不加后缀） Java严格区分大小写，但是Windows路径不区分大小写； 注释分为单行注释、多行注释和文档注释；文档注释可被编译器编译，生成网页形式的说明文档； 12345/**@author 指定作者@version 指定源文件版本*/javadoc -d myHello -author -version HelloJava.java 一个源文件中可以写多个类，但最多只能有一个类声明为public，并且这个类得和.java文件同名。 编译时每个类单独生成一个class文件。 不知道学了多少遍的基础知识 变量相关 Java中有关键字和保留字。保留字现在还不是关键字但以后可能会是。 自己起的变量名叫标识符，注意不能用数字开头； 命名规范：包名全小写；类名接口名所有单词首字母大写；变量和方法名第一个单词首字母小写，后面开始大写；常量名全大写，单词之间用_连接；变量必须定义在作用域（{}）中； 声明long型变量以l或者L结尾； char中只能有一个字符，可以是转义字符； Unicode底层字符，可以是如同'123'的字符；保存文件的时候用ANSI编码时，cmd可以输出中文； 类型之间的关系 byte、char、short同级，运算之后必须赋值给int类型的变量；强制类型转换时截断或者变成最小值； byte b+1编译不通过，因为默认常数是int型，小数是double型； string可以和boolean类型做运算，结果为后面连接一个true或者false； 进行赋值时，八进制用0开头，二进制0b开头，十六进制0x开头； 运算符 运算符分为算术、赋值、比较、逻辑、位运算、三元运算符； 取余运算的结果符号与被模数的符号相同。 自增1不会改变本身数据的类型（针对int，byte等类型）；Java支持连续赋值； +=不会改变变量本身的数据类型。 12345short s1 = 10;s1 += 2; // 可通过编译；int n = 10;n += (n++) + (++n); // 32 比较运算符结果都是Boolean型； instanceof()：检查是否是类的对象； &amp;&amp; 短路与；|| 短路或；^ 逻辑异或。短路运算符按顺序运行，如果左侧的表达式已知其值是true或者false，则右侧的表达式不会进行计算； 逻辑运算符只能适用于布尔类型变量； 位运算：直接对整数的二进制进行运算。&gt;&gt;&gt; 无符号右移（不管被移动数字是正还是负，最高位都用0补齐）；~取反运算； 使用位运算符交换两个变量的值： 123num1 = num1 ^ num2;num2 = num1 ^ num2;num1 = num1 ^ num2; 单目运算符、三元运算符、赋值运算符都是从右向左计算；这导致a?b:c?d:e 等价于 a?b:(c?d:e) 而不是 (a?b:c)?d:e Java程序在控制台进行交互 从键盘获取不同类型变量：使用Scanner类； 1234567import java.util.Scanner;Scanner scan = new Scanner(System.in);int num = scan.nextInt();string: scan.next();scan.nextDouble();scan.nextBoolean(); char型没有单独的输入方式，可以用读取字符串的方式读入，再从中取出某一位： 1234567Math.sqrt(i);String s = readKeyBoard(i); // 从键盘读入一个长度i的字符串s.tpUpperCase(); // 变成大写s.charAt(i); // 可以取出某个位置的字符(int)(Math.random()*90+10); // random产生0到1的随机数 switch后面的表达式类型可以是：byte，short，char，int，枚举类型，string 123456int[] x，y[]; // x是一维数组，y是二维数组；// 此时x代表一个对象（Java和C不同）y[0] = x; // yesarray2 = array1; // 即可完成数组的复制，注意这个时候array2和array1指向同一个位置，改array2，array1也会改变// 正确的数组复制需要new一个数组，逐个赋值 Java的string可以很长。 数组 数组的元素可以是基本或者引用数据类型；数组长度定好之后不能修改！ 123456//静态初始化int[] ids;ids = new in[]&#123;1,2,3&#125;;ids = &#123;1,2,3&#125;;//动态初始化String[] names = new String[4]; 数组元素是引用数据类型则默认值是null； arrays工具类的使用： 12345boolean equals(int[] a, int[] b); //判断两个数组是否相等String toString(int[] a); //输出数组信息void fill(int[] a, int val); //指定值填充到数组中void sort(int[] a); //排序int binarySearch(int[] a, int key); //对排序后的数组进行二分法检索指定的值 数组如果没有赋值会报空指针错误，null； 新建变量的存储位置 栈中：存放局部变量；堆中：new出来的对象和数组； string：常量池中；static类型的变量：保存在静态域中； 12String[][] arr2 = new String[3][2];String[][] arr3 = new String[3][]; Java面向对象 Java类及类的成员包含的“内容”：属性，方法，构造器； 其中有些特殊的成员：代码块，内部类 面向对象的三大特性：封装，继承，多态。有些人还命名的其他特性如抽象性。 类和对象 类的成员：属性（成员变量），行为（方法函数）。 属性直接定义在类的{}里，局部变量在方法等的内部； 局部变量不能加修饰符（除了final）。非static属性是类的每个对象都有一套。 小tips：alt+左箭头可以快速到函数定义位置或返回 如果要使用对象的方法，哪怕是在对象内部使用也要new一个对象； 四舍五入取整：Math.round(double d)；非对象语言和Java交互的时候依然表现为对象； 引用数据类型在使用的时候其变量名都是代表地址值； 匿名对象的使用（每次都重新创建一个对象）： 12new phone().sendEmail();mall.show(mew phone()); 函数的值传递机制： 参数是基本数据类型，实参赋给形参的是他储存的真实数据值； 参数是引用数据类型，形参得到的是变量所保存的数据的地址值。 1println(char[] x); //直接输出了char数组 重载 重载两同一不同：同一个类，相同方法名；参数列表不同：参数个数或者类型不同； 返回值相同或者不同都可以构成重载； 可变个数形参的方法：public void show(String ... strs)；即“数据类型 ... 数据名”的形式；参数数量可以是0个。 需要注意可变个数形参的方法与把数组作为参数的方法不构成重载； 可变个数形参必须放在最后；重载的函数中最多声明一个可变个数形参； 类的封装和隐藏 把类的属性声明成private，则类外不能直接调用属性；只能通过方法如setlegs，getlegs. 封装性的体现需要权限修饰符来配合：private，缺省，protected，public（从小到大）。 属性体现封装性，类也可以体现封装性； 修饰符 类内部 同一个包 不同包的子类 同一个工程 private yes default yes yes protected yes yes yes public yes yes yes yes 有四种权限修饰符可以修饰类和类的内部结构。class的权限只可以用public和default； 不同的包可以定义重名类。 构造器：功能是创建对象，实际使用中和类同名。不显式定义则默认提供一个空参的构造器。构造器严格来说不是方法，可以重载。 属性赋值的先后顺序：默认，显式初始化，构造器中赋值，调用属性进行赋值。 Javabean：特殊的java类。类是公共的，有一个无参的公共的构造器，有属性，有对应的get，set方法；可重用组件。 默认构造器的权限和其所在的类相同。 在开发过程中，为了清晰的显示类和类之间的关系，可以使用UML类图。 this和import的使用 方法内部用，则表示对该方法对象的引用；构造器内部使用，表示构造器正在初始化的对象； this表示当前对象，可以修饰方法，属性； 类的方法中可以使用this.属性或this.方法，构造器中也可以this修饰方法和属性； this调用构造器：this(args)，主要是为了减少构造器中的冗余代码；自始至终对象只有一个；this(args)必须声明在当前构造器首行，构造器内部最多只能调用一个其他构造器； ALT+SHITF+S 调出代码生成器 package：更好的管理类，声明类或者接口属于的包，放在首行； MVC设计模式：M模型处理数据，V视图显示数据，C控制处理业务逻辑； import：在源文件中使用import导入指定包下的类和接口；声明在包和类的声明之间；import xxx.*导入其下所有内容，但是不包含其中的子包； import static：导入类或接口中的静态结构，同时import static的结尾一定是.* 持续更新ing","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://shymuel.top/tags/Java/"},{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【HEXO搭建个人网站】1 基础知识","slug":"【HEXO搭建个人网站】1 基础知识","date":"2021-07-11T04:56:11.000Z","updated":"2022-07-22T17:22:03.701Z","comments":true,"path":"b077d8cb.html","link":"","permalink":"https://shymuel.top/b077d8cb.html","excerpt":"","text":"环境搭建 首先安装node.js，直接官网下载安装。接着安装git for windows，直接官网安装（访问官网及后续安装搞个梯子会方便很多）。安装之后用下述语句查看版本以确认安装成功。 123git versionnode -vnpm -v 新建一个文件夹用于存放博客相关的环境和内容配置，例如\"blog\"。在该文件夹中右击，选择\"Git bash here\"。安装HEXO： 123npm install hexo -g #安装Hexonpm update hexo -g #升级，可不进行hexo init #初始化博客 HEXO的常用指令如下（这些指令均要在上面创建的blog文件夹路径下运行）： 1234567891011hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; # 新建文章hexo g == hexo generate # 生成hexo s == hexo server # 启动服务预览（安装hexo之后直接就可以进行）hexo d == hexo deploy # 部署到GitHub（需要预先与GitHub进行连接）# 上面的几条语句，使用的时候输入&quot;==&quot;前面的部分就可以了。hexo server # Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s # 静态模式hexo server -p 5000 # 更改端口hexo server -i 192.168.1.1 # 自定义 IPhexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令 这样就可以在本地预览网站效果。为了能在其他设备上访问自己的网站，我选择GitHub托管自己的数据。 具体的操作是在GitHub上建立仓库，然后配置权限让自己可以把blog的内容直接部署到GitHub上。上传成功之后就可以用仓库的名称来访问博客，如我的是\"shymuel.github.io\"。但github的后缀容易被墙，我的解决方法是自己购买一个域名。国内域名需要实名审核但比较保险，大家可以自行选择合适的域名商。 Volantis主题使用 HEXO使用量最大的主题大概就是NexT了，它的功能十分强大，看起来也比较简洁。 我为了看起来更加的二次元而选择了Volantis主题，主要是为了使用它的定时换背景功能（因为我有太多壁纸想放上去了）。图片目前我还是放在本地，采用相对路径。后面抽空研究一下如何使用CDN实现图片读取。 Volantis自带文章目录功能，可根据md文件中的标题在网页一侧生成目录。 配置背景图、头像之类的需要在blog文件夹下新建名为\"_config.volantis.yml\"的文件进行配置。建议按照主题文档进行。 对于字数统计和阅读时长显示，先要安装wordcount插件： 1npm i --save hexo-wordcount 之后可以通过主题配置文件里的 word_count 关键字来选择是否开启此功能，默认false。在配置文件的enable后面加上true。 Twikoo评论插件 根据官方文档进行配置。我选择的是Vercel部署方式。原开发者做了非常非常详细的视频教程。我把_config.volantis.yml中关于评论的设置改成了如下的样子： 1234567891011121314151617twikoo: js: https://cdn.jsdelivr.net/npm/twikoo@latest # 建议锁定版本 path: # 全局评论地址 # 其他配置项按照yml格式继续填写即可 除了 [el path] 选项 envId: https://twikoo-dusky.vercel.app/ # vercel id appId: # your appId appKey: # your appKey meta: [nick,mail,link] # valine comment header info requiredFields: [nick,mail] enableQQ: true # Unstable avatar link recordIP: false # Record commenter IP avatar: img/avatar.jpg # gravatar style https://valine.js.org/avatar pageSize: 10 # comment list page size lang: zh-cn highlight: true mathJax: false 部署之后还可以根据自己的需求，下载密钥设置管理员密码来对评论系统进行管理和定制。 暗黑模式 按照_config.volantis.yml中的描述，修改navbar目录，在menu子目录中添加： 123- name: 暗黑模式 # 可自定义 icon: fas fa-moon # 可自定义 toggle: darkmode 自动生成文章的唯一永久链接 使用abbrlink生成。首先下载abbrlink。 1npm install hexo-abbrlink --save 之后修改根目录站点配置文件config.yml，改为： 1234url: https://自己的网址名/permalink: :abbrlink.htmlabbrlink: alg: crc32 #算法： crc16(default) and crc32 之后hexo三连即可。 插入LateX公式 更换渲染工具为 hexo-renderer-pandoc： 123npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-pandoc --save 安装 hexo-math 插件以支持 latex 公式： 1npm install hexo-math --save volantis主题的话，在_config.volantis.yml中把mathjax后面改成true即可。注意要clean之后重新生成，latax公式才能正常显示。 记得要在有公式的博客开头加上： 1mathjax: true","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://shymuel.top/tags/HEXO/"},{"name":"个人网站","slug":"个人网站","permalink":"https://shymuel.top/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}]},{"title":"新的开始","slug":"新的开始","date":"2021-06-26T12:44:43.000Z","updated":"2024-01-19T16:12:14.068Z","comments":true,"path":"b585e161.html","link":"","permalink":"https://shymuel.top/b585e161.html","excerpt":"","text":"最后还是回来写代码了……感觉传统工科的老师都在搞机器学习，那我也没有办法，只能重新回来刷题。 这个博客上的内容可能会写的支离破碎一些，毕竟现在都在做各种项目，也不可能把全部的代码放上来，大概只是记录一下自己能做到什么功能吧，核心代码也会放一些。 2024.1.20 太久没有发博客了，新的一年，争取月更！","categories":[{"name":"日志","slug":"日志","permalink":"https://shymuel.top/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://shymuel.top/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"机器学习","slug":"机器学习","permalink":"https://shymuel.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"课程笔记","slug":"课程笔记","permalink":"https://shymuel.top/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"日语学习","slug":"日语学习","permalink":"https://shymuel.top/categories/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/"},{"name":"强化学习","slug":"强化学习","permalink":"https://shymuel.top/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"日志","slug":"日志","permalink":"https://shymuel.top/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"XAI","slug":"XAI","permalink":"https://shymuel.top/tags/XAI/"},{"name":"resources","slug":"resources","permalink":"https://shymuel.top/tags/resources/"},{"name":"AI框架","slug":"AI框架","permalink":"https://shymuel.top/tags/AI%E6%A1%86%E6%9E%B6/"},{"name":"机器学习","slug":"机器学习","permalink":"https://shymuel.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://shymuel.top/tags/Pytorch/"},{"name":"编程语言","slug":"编程语言","permalink":"https://shymuel.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Haskell","slug":"Haskell","permalink":"https://shymuel.top/tags/Haskell/"},{"name":"模电","slug":"模电","permalink":"https://shymuel.top/tags/%E6%A8%A1%E7%94%B5/"},{"name":"软件使用","slug":"软件使用","permalink":"https://shymuel.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"代码管理","slug":"代码管理","permalink":"https://shymuel.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"Python","slug":"Python","permalink":"https://shymuel.top/tags/Python/"},{"name":"C++","slug":"C","permalink":"https://shymuel.top/tags/C/"},{"name":"日语","slug":"日语","permalink":"https://shymuel.top/tags/%E6%97%A5%E8%AF%AD/"},{"name":"日文歌","slug":"日文歌","permalink":"https://shymuel.top/tags/%E6%97%A5%E6%96%87%E6%AD%8C/"},{"name":"文档编辑","slug":"文档编辑","permalink":"https://shymuel.top/tags/%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91/"},{"name":"安利","slug":"安利","permalink":"https://shymuel.top/tags/%E5%AE%89%E5%88%A9/"},{"name":"优秀网站","slug":"优秀网站","permalink":"https://shymuel.top/tags/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99/"},{"name":"强化学习","slug":"强化学习","permalink":"https://shymuel.top/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"人工智能","slug":"人工智能","permalink":"https://shymuel.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"HEXO","slug":"HEXO","permalink":"https://shymuel.top/tags/HEXO/"},{"name":"个人网站","slug":"个人网站","permalink":"https://shymuel.top/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"Java","slug":"Java","permalink":"https://shymuel.top/tags/Java/"},{"name":"随笔","slug":"随笔","permalink":"https://shymuel.top/tags/%E9%9A%8F%E7%AC%94/"}]}